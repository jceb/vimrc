Index: .vim/bundle/commentary/plugin/commentary.vim
===================================================================
--- .vim.orig/bundle/commentary/plugin/commentary.vim
+++ .vim/bundle/commentary/plugin/commentary.vim
@@ -16,25 +16,14 @@ function! s:go(type,...) abort
   endif
 
   let [l, r] = split(substitute(substitute(&commentstring,'\S\zs%s',' %s',''),'%s\ze\S','%s ',''),'%s',1)
-  let uncomment = 2
-  for lnum in range(lnum1,lnum2)
-    let line = matchstr(getline(lnum),'\S.*\s\@<!')
-    if line != '' && (stridx(line,l) || line[strlen(line)-strlen(r) : -1] != r)
-      let uncomment = 0
-    endif
-  endfor
-
+  let preferred_comment_column = matchstr(getline(lnum1),'^\s*')
   for lnum in range(lnum1,lnum2)
     let line = getline(lnum)
-    if strlen(r) > 2 && l.r !~# '\\'
-      let line = substitute(line,
-            \'\M'.r[0:-2].'\zs\d\*\ze'.r[-1:-1].'\|'.l[0].'\zs\d\*\ze'.l[1:-1],
-            \'\=substitute(submatch(0)+1-uncomment,"^0$\\|^-\\d*$","","")','g')
-    endif
-    if uncomment
-      let line = substitute(line,'\S.*\s\@<!','\=submatch(0)[strlen(l):-strlen(r)-1]','')
+    let cropped_line = matchstr(line,'\S.*\s\@<!')
+    if cropped_line != '' && (stridx(cropped_line,l) || cropped_line[strlen(cropped_line)-strlen(r) : -1] != r)
+      let line = substitute(line,'^\%('.preferred_comment_column.'\|\s*\)\zs.*\S\@<=','\=l.submatch(0).r','')
     else
-      let line = substitute(line,'^\%('.matchstr(getline(lnum1),'^\s*').'\|\s*\)\zs.*\S\@<=','\=l.submatch(0).r','')
+      let line = substitute(line,'\S.*\s\@<!','\=submatch(0)[strlen(l):-strlen(r)-1]','')
     endif
     call setline(lnum,line)
   endfor
