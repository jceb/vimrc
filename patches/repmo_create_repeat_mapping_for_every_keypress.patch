Index: vim/pack/vimscripts/start/repmo/plugin/repmo.vim
===================================================================
--- vim.orig/pack/vimscripts/start/repmo/plugin/repmo.vim
+++ vim/pack/vimscripts/start/repmo/plugin/repmo.vim
@@ -140,12 +140,9 @@ no <expr> <sid>cnt<Space> <sid>Count("ge
 let s:SNR = matchstr(maparg("<sid>lastkey", "n"), '<SNR>\d\+_')
  "}}}
 
-func! RepmoMap(key, revkey, ...) abort "{{{
-    " Args: {motion} {rev-motion}
-    " map the {motion} key; {motion}+{rev-motion} on RHS
-    let unique = a:0>=1 && a:1 ? "<unique>" : ""
-    let lhs = printf("<special><script><silent>%s %s", unique, a:key)
-    let rhs = "<sid>repmo('". substitute(a:key."','".a:revkey,"<","<lt>","g"). "')<cr>"
+func! <sid>Map(unique, key, revkey, nmap, xmap, omap, nrevmap, xrevmap, orevmap) abort "{{{
+    let lhs = printf("<special><script><silent>%s %s", a:unique, a:key)
+    let rhs = "<sid>repmo('". substitute(a:key."','".a:revkey."','".a:nmap."','".a:xmap."','".a:omap."','".a:nrevmap."','".a:xrevmap."','".a:orevmap,"<","<lt>","g"). "')<cr>"
     if maparg(a:key, "o") == ""
 	" makes the output of :map look better
 	exec "noremap" lhs rhs
@@ -155,50 +152,123 @@ func! RepmoMap(key, revkey, ...) abort "
 	exec "nnoremap" lhs rhs
 	exec "xnoremap" lhs rhs
     endif
+endfunc "}}}
+
+func! RepmoMap(key, revkey, ...) abort "{{{
+    " Args: {motion} {rev-motion}
+    " map the {motion} key; {motion}+{rev-motion} on RHS
+    let unique = a:0>=1 && a:1 ? "<unique>" : ""
+    let nmap = maparg(a:key, 'n')
+    let xmap = maparg(a:key, 'x')
+    let omap = maparg(a:key, 'o')
+    let nrevmap = maparg(a:revkey, 'n')
+    let xrevmap = maparg(a:revkey, 'x')
+    let orevmap = maparg(a:revkey, 'o')
+    " map key
+    call <sid>Map(unique, a:key, a:revkey, nmap, xmap, omap, nrevmap, xrevmap, orevmap)
+
+    " reverse map key
+    call <sid>Map(unique, a:revkey, a:key, nrevmap, xrevmap, orevmap, nmap, xmap, omap)
+
     " omit :omap and :smap, protect alien :omaps (but not :smaps)
 endfunc "}}}
 
-func! <sid>MapRepeatMotion(vmode, key, revkey) "{{{
+func! <sid>MapRepeatMotion(vmode, key, revkey, nmap, xmap, omap, nrevmap, xrevmap, orevmap) "{{{
     " map ";" and ","
     " remap the motion a:key to something simpler than this function
     let cnt = v:count
     if a:vmode
 	normal! gv
     endif
+    " these mappings have to be created for the reverse key as well
+    let nkey = a:nmap == '' ? a:key : a:nmap
+    let nnoremap = a:nmap == '' ? 'nore' : ''
+    let xkey = a:xmap == '' ? a:key : a:xmap
+    let xnoremap = a:xmap == '' ? 'nore' : ''
+    let okey = a:omap == '' ? a:key : a:omap
+    let onoremap = a:omap == '' ? 'nore' : ''
+
+    let nrevkey = a:nrevmap == '' ? a:revkey : a:nrevmap
+    let nrevnoremap = a:nrevmap == '' ? 'nore' : ''
+    let xrevkey = a:xrevmap == '' ? a:revkey : a:xrevmap
+    let xrevnoremap = a:xrevmap == '' ? 'nore' : ''
+    let orevkey = a:orevmap == '' ? a:revkey : a:orevmap
+    let orevnoremap = a:orevmap == '' ? 'nore' : ''
+
+    let nrawkey = eval('"'.escape(nkey, '\<"').'"')
+    let xrawkey = eval('"'.escape(xkey, '\<"').'"')
+    let orawkey = eval('"'.escape(okey, '\<"').'"')
     let rawkey = eval('"'.escape(a:key, '\<"').'"')
     let whitecnt = (rawkey=~'^\s$' ? "1" : "")
-    exec "normal!" (cnt >= 1 ? cnt : whitecnt). rawkey
-
-    if s:lastkey != "" && s:lastkey != a:key
-	" restore "full" mapping
-	call RepmoMap(s:lastkey, s:lastrevkey)
+    if (a:xmap == '' && a:vmode) || (a:nmap == '' && ! a:vmode)
+	exec "normal! ".(cnt >= 1 ? cnt : whitecnt).rawkey
+    elseif a:vmode
+	exec "normal ".(cnt >= 1 ? cnt : whitecnt).xrawkey
+    else
+	exec "normal ".(cnt >= 1 ? cnt : whitecnt).nrawkey
     endif
 
-    if cnt > 0
+    "if s:lastkey != "" && s:lastkey != a:key
+	"" restore "full" mapping
+	"call RepmoMap(s:lastkey, s:lastrevkey)
+    "endif
+
 	" map ";" and ","
 	let hasrepmo = 0
 	if exists("g:repmo_key") && g:repmo_key != ''
-	    exec "noremap <special>" g:repmo_key cnt.a:key
+	    if cnt > 0
+		if a:xmap == '' && a:nmap == ''
+		    exec "noremap <special>" g:repmo_key cnt.a:key
+		else
+		    exec "n".nnoremap."map <special>" g:repmo_key cnt.nkey
+		    exec "v".xnoremap."map <special>" g:repmo_key cnt.xkey
+		    exec "o".onoremap."map <special>" g:repmo_key cnt.okey
+		endif
+	    else
+		if a:xmap == '' && a:nmap == ''
+		    exec "noremap <special>" g:repmo_key a:key
+		else
+		    exec "n".nnoremap."map <special>" g:repmo_key nkey
+		    exec "v".xnoremap."map <special>" g:repmo_key xkey
+		    exec "o".onoremap."map <special>" g:repmo_key okey
+		endif
+	    endif
 	    exec "sunmap <special>" g:repmo_key
 	    let hasrepmo = 1
 	endif
 	if exists("g:repmo_revkey") && g:repmo_revkey != ''
-	    exec "noremap <special>" g:repmo_revkey cnt.a:revkey
+	    if cnt > 0
+		if a:xmap == '' && a:nmap == ''
+		    exec "noremap <special>" g:repmo_revkey cnt.a:revkey
+		else
+		    exec "n".nrevnoremap."map <special>" g:repmo_revkey cnt.nrevkey
+		    exec "v".xrevnoremap."map <special>" g:repmo_revkey cnt.xrevkey
+		    exec "o".orevnoremap."map <special>" g:repmo_revkey cnt.orevkey
+		endif
+	    else
+		if a:xmap == '' && a:nmap == ''
+		    exec "noremap <special>" g:repmo_revkey a:revkey
+		else
+		    exec "n".nrevnoremap."map <special>" g:repmo_revkey nrevkey
+		    exec "v".xrevnoremap."map <special>" g:repmo_revkey xrevkey
+		    exec "o".orevnoremap."map <special>" g:repmo_revkey orevkey
+		endif
+	    endif
 	    exec "sunmap <special>" g:repmo_revkey
 	    let hasrepmo = 1
 	endif
 	if hasrepmo
 	    call s:TransRepeatMaps()
 	endif
-    endif
 
+    " disable leightweight function, it doesn't really work for me
     " map to leightweight func
-    exec "nmap <special>" a:key "<sid>lastkey"
-    exec "xmap <special>" a:key "<sid>lastkey"
+    " exec "nmap <special>" a:key "<sid>lastkey"
+    " exec "xmap <special>" a:key "<sid>lastkey"
 
-    let s:lastkey = a:key
-    let s:lastkeynorm = whitecnt. rawkey
-    let s:lastrevkey = a:revkey
+    " let s:lastkey = a:key
+    " let s:lastkeynorm = whitecnt. rawkey
+    " let s:lastrevkey = a:revkey
 
 endfunc "}}}
 func! <sid>MapRepMo(vmode) "{{{
@@ -259,7 +329,6 @@ func! s:CreateMappings(pairs) "{{{
 	let keys = split(pair, "|")
 	if len(keys) == 2
 	    call RepmoMap(keys[0], keys[1], unique)
-	    call RepmoMap(keys[1], keys[0], unique)
 	elseif pair == "<unique>"
 	    let unique = 1
 	else
