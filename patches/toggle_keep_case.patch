Index: vim/.vim/plugin/toggle.vim
===================================================================
--- vim.orig/.vim/plugin/toggle.vim	2010-03-04 21:38:31.995917216 +0100
+++ vim/.vim/plugin/toggle.vim	2010-03-05 07:51:32.130271364 +0100
@@ -53,8 +53,8 @@
 set cpo&vim
 
 "imap <C-T> <C-O>:call Toggle()<CR>
-nmap <ESC>t :call Toggle()<CR>
-vmap <ESC>t <ESC>:call Toggle()<CR>
+nmap ,t :call Toggle()<CR>
+vmap ,t <ESC>:call Toggle()<CR>
 
 "--------------------------------------------------
 " If you don't want to break the standard <C-T> assignments,
@@ -175,35 +175,46 @@
         endwhile " }}}
 
         let s:wordUnderCursor = strpart(s:cline, s:startOfWord, s:endOfWord-s:startOfWord)
-        if (s:wordUnderCursor == "true")
-            let s:wordUnderCursor = "false"
+		let s:wordUnderCursor_tmp = ''
+        if (s:wordUnderCursor ==? "true")
+            let s:wordUnderCursor_tmp = "false"
             let s:toggleDone = 1
-        elseif (s:wordUnderCursor == "false")
-            let s:wordUnderCursor = "true"
+        elseif (s:wordUnderCursor ==? "false")
+            let s:wordUnderCursor_tmp = "true"
             let s:toggleDone = 1
 
-        elseif (s:wordUnderCursor == "on")
-            let s:wordUnderCursor = "off"
-            let s:toggleDone = 1
-        elseif (s:wordUnderCursor == "off")
-            let s:wordUnderCursor = "on"
+        elseif (s:wordUnderCursor ==? "on")
+            let s:wordUnderCursor_tmp = "off"
             let s:toggleDone = 1
+        elseif (s:wordUnderCursor ==? "off")
+            let s:wordUnderCursor_tmp = "on"
 
-        elseif (s:wordUnderCursor == "yes")
-            let s:wordUnderCursor = "no"
+        elseif (s:wordUnderCursor ==? "yes")
+            let s:wordUnderCursor_tmp = "no"
             let s:toggleDone = 1
-        elseif (s:wordUnderCursor == "no")
-            let s:wordUnderCursor = "yes"
+        elseif (s:wordUnderCursor ==? "no")
+            let s:wordUnderCursor_tmp = "yes"
             let s:toggleDone = 1
 
-        elseif (s:wordUnderCursor == "define")
-            let s:wordUnderCursor = "undef"
+        elseif (s:wordUnderCursor ==? "define")
+            let s:wordUnderCursor_tmp = "undef"
             let s:toggleDone = 1
-        elseif (s:wordUnderCursor == "undef")
-            let s:wordUnderCursor = "define"
+        elseif (s:wordUnderCursor ==? "undef")
+            let s:wordUnderCursor_tmp = "define"
             let s:toggleDone = 1
         endif
 
+        " preserve case
+        if s:toggleDone
+            if strpart (s:wordUnderCursor, 0) =~ '^\u*$'
+                let s:wordUnderCursor = toupper (s:wordUnderCursor_tmp)
+            elseif strpart (s:wordUnderCursor, 0, 1) =~ '^\u$'
+                let s:wordUnderCursor = toupper (strpart (s:wordUnderCursor_tmp, 0, 1)).strpart (s:wordUnderCursor_tmp, 1)
+            else
+                let s:wordUnderCursor = s:wordUnderCursor_tmp
+            endif
+        endif
+
         " if wordUnderCursor is changed, set the new line
         if (s:toggleDone == 1)
             let s:ncline = s:Toggle_changeString(s:cline, s:startOfWord, s:endOfWord-1, s:wordUnderCursor)
