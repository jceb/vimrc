Index: vimconfig/.vim/plugin/toggle.vim
===================================================================
--- vimconfig.orig/.vim/plugin/toggle.vim	2009-01-16 17:16:22.000000000 +0100
+++ vimconfig/.vim/plugin/toggle.vim	2009-01-16 17:38:58.000000000 +0100
@@ -175,35 +175,47 @@
         endwhile " }}}
 
         let s:wordUnderCursor = strpart(s:cline, s:startOfWord, s:endOfWord-s:startOfWord)
-        if (s:wordUnderCursor == "true")
-            let s:wordUnderCursor = "false"
+		let s:wordUnderCursor_tmp = ''
+        if (s:wordUnderCursor ==? "true")
+            let s:wordUnderCursor_tmp = "false"
             let s:toggleDone = 1
-        elseif (s:wordUnderCursor == "false")
-            let s:wordUnderCursor = "true"
+        elseif (s:wordUnderCursor ==? "false")
+            let s:wordUnderCursor_tmp = "true"
             let s:toggleDone = 1
 
-        elseif (s:wordUnderCursor == "on")
-            let s:wordUnderCursor = "off"
+        elseif (s:wordUnderCursor ==? "on")
+            let s:wordUnderCursor_tmp = "off"
             let s:toggleDone = 1
-        elseif (s:wordUnderCursor == "off")
-            let s:wordUnderCursor = "on"
+        elseif (s:wordUnderCursor ==? "off")
+            let s:wordUnderCursor_tmp = "on"
             let s:toggleDone = 1
 
-        elseif (s:wordUnderCursor == "yes")
-            let s:wordUnderCursor = "no"
+        elseif (s:wordUnderCursor ==? "yes")
+            let s:wordUnderCursor_tmp = "no"
             let s:toggleDone = 1
-        elseif (s:wordUnderCursor == "no")
-            let s:wordUnderCursor = "yes"
+        elseif (s:wordUnderCursor ==? "no")
+            let s:wordUnderCursor_tmp = "yes"
             let s:toggleDone = 1
 
-        elseif (s:wordUnderCursor == "define")
-            let s:wordUnderCursor = "undef"
+        elseif (s:wordUnderCursor ==? "define")
+            let s:wordUnderCursor_tmp = "undef"
             let s:toggleDone = 1
-        elseif (s:wordUnderCursor == "undef")
-            let s:wordUnderCursor = "define"
+        elseif (s:wordUnderCursor ==? "undef")
+            let s:wordUnderCursor_tmp = "define"
             let s:toggleDone = 1
         endif
 
+        " preserve case
+        if s:toggleDone
+            if strpart (s:wordUnderCursor, 0) =~ '^\u*$'
+                let s:wordUnderCursor = toupper (s:wordUnderCursor_tmp)
+            elseif strpart (s:wordUnderCursor, 0, 1) =~ '^\u$'
+                let s:wordUnderCursor = toupper (strpart (s:wordUnderCursor_tmp, 0, 1)).strpart (s:wordUnderCursor_tmp, 1)
+            else
+                let s:wordUnderCursor = s:wordUnderCursor_tmp
+            endif
+        endif
+
         " if wordUnderCursor is changed, set the new line
         if (s:toggleDone == 1)
             let s:ncline = s:Toggle_changeString(s:cline, s:startOfWord, s:endOfWord-1, s:wordUnderCursor)
