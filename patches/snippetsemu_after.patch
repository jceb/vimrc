personal after configuration for snippetsEmu

From: Jan Christoph Ebersbach <jan-christoph.ebersbach@e-jc.de>


---

 .vim/after/ftplugin/asciidoc_snippets.vim |   39 +++++++++++++++++++++++++++++
 .vim/after/ftplugin/c_snippets.vim        |    2 +
 .vim/after/ftplugin/groovy_snippets.vim   |   13 ++++++++++
 .vim/after/ftplugin/gsp.vim               |    9 +++++++
 .vim/after/ftplugin/gsp_snippets.vim      |   16 ++++++++++++
 .vim/after/ftplugin/html.vim              |    8 ++++--
 .vim/after/ftplugin/html_snippets.vim     |    8 ++++++
 .vim/after/ftplugin/python_snippets.vim   |    4 +++
 .vim/after/ftplugin/ruby_snippets.vim     |    1 +
 .vim/after/ftplugin/sh_snippets.vim       |   14 ++++++++++
 .vim/after/ftplugin/xhtml_snippets.vim    |    1 +
 .vim/after/ftplugin/xul.vim               |    8 ++++--
 12 files changed, 117 insertions(+), 6 deletions(-)
 create mode 100644 .vim/after/ftplugin/asciidoc_snippets.vim
 create mode 100644 .vim/after/ftplugin/groovy_snippets.vim
 create mode 100644 .vim/after/ftplugin/gsp.vim
 create mode 100644 .vim/after/ftplugin/gsp_snippets.vim


Index: vimconfig/.vim/after/ftplugin/asciidoc_snippets.vim
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ vimconfig/.vim/after/ftplugin/asciidoc_snippets.vim	2009-01-16 18:04:28.000000000 +0100
@@ -0,0 +1,39 @@
+if !exists('loaded_snippet') || &cp
+    finish
+endif
+
+let st = g:snip_start_tag
+let et = g:snip_end_tag
+let cd = g:snip_elem_delim
+
+exec "Snippet image image:".st."URI".et."[".st."caption".et."]".st.et
+exec "Snippet link link:".st."URI".et."[".st."caption".et."]".st.et
+exec "Snippet mailto mailto:".st."email".et."[".st."caption".et."]".st.et
+exec "Snippet callto callto:".st."phone".et."[".st."caption".et."]".st.et
+exec "Snippet include include::".st."file".et."[".st."options".et."]".st.et
+
+exec "Snippet NOTE [NOTE]<CR>".st.et
+exec "Snippet note NOTE: ".st.et
+exec "Snippet TIP [TIP]<CR>".st.et
+exec "Snippet tip TIP: ".st.et
+exec "Snippet IMPORTANT [IMPORTANT]<CR>".st.et
+exec "Snippet important IMPORTANT: ".st.et
+exec "Snippet WARNING [WARNING]<CR>".st.et
+exec "Snippet warning WARNING: ".st.et
+exec "Snippet CAUTION [CAUTION]<CR>".st.et
+exec "Snippet caution CAUTION: ".st.et
+
+exec "Snippet black [black]#".st.et."#".st.et
+exec "Snippet blue [blue]#".st.et."#".st.et
+exec "Snippet green [green]#".st.et."#".st.et
+exec "Snippet magenta [magenta]#".st.et."#".st.et
+exec "Snippet orange [orange]#".st.et."#".st.et
+exec "Snippet red [red]#".st.et."#".st.et
+exec "Snippet white [white]#".st.et."#".st.et
+exec "Snippet yellow [yellow]#".st.et."#".st.et
+
+exec "Snippet h0 ".st.et."<CR>====="
+exec "Snippet h1 ".st.et."<CR>-----"
+exec "Snippet h2 ".st.et."<CR>~~~~~"
+exec "Snippet h3 ".st.et."<CR>^^^^^"
+exec "Snippet h4 ".st.et."<CR>+++++"
Index: vimconfig/.vim/after/ftplugin/c_snippets.vim
===================================================================
--- vimconfig.orig/.vim/after/ftplugin/c_snippets.vim	2009-01-16 18:03:39.000000000 +0100
+++ vimconfig/.vim/after/ftplugin/c_snippets.vim	2009-01-16 18:04:28.000000000 +0100
@@ -36,6 +36,7 @@
 exec "Snippet class class ".st."name".et."<CR>{<CR>public:<CR>".st."name".et." (".st."arguments".et.");<CR>virtual ~".st."name".et."();<CR><CR>private:<CR>".st.et."<CR>};<CR>".st.et
 " TODO This is a good one but I can't quite work out the syntax yet
 exec "Snippet printf printf(\"".st."\"%s\"".et."\\n\"".st."\"%s\":CArgList(Count(@z, '%[^%]'))".et.");<CR>".st.et
+exec "Snippet fprintf fprintf(".st."stderr".et."\"".st."\"%s\"".et."\\n\"".st."\"%s\":CArgList(Count(@z, '%[^%]'))".et.");<CR>".st.et
 exec "Snippet vector std::vector<".st."char".et."> v".st.et.";"
 exec "Snippet struct struct ".st."name".et."<CR>{<CR>".st.et."<CR>};<CR>".st.et
 exec "Snippet template template <typename ".st."_InputIter".et."><CR>".st.et
@@ -49,3 +50,4 @@
 exec "Snippet Inc #include <".st.et."><CR>".st.et
 exec "Snippet inc #include \"".st.et.".h\"".st.et
 exec "Snippet for for( ".st.et." ".st."i".et." = ".st.et."; ".st."i".et." < ".st."count".et."; ".st."i".et." += ".st.et.")<CR>{<CR>".st.et."<CR>}<CR>".st.et
+exec "Snippet func ".st."rtype".et."<CR>".st."name".et." (".st."args".et.")<CR>{<CR>".st."body".et."<CR>}<CR>".st.et
Index: vimconfig/.vim/after/ftplugin/groovy_snippets.vim
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ vimconfig/.vim/after/ftplugin/groovy_snippets.vim	2009-01-16 18:04:28.000000000 +0100
@@ -0,0 +1,13 @@
+if !exists('loaded_snippet') || &cp
+    finish
+endif
+
+let st = g:snip_start_tag
+let et = g:snip_end_tag
+let cd = g:snip_elem_delim
+
+exec 'Snippet kv '.st.et.': '.st.'value'.et.st.et
+exec 'Snippet class class '.st.'name'.et.'<CR>{<CR>'.st.et.'<CR>}'
+exec 'Snippet if if ('.st.et.')<CR>{<CR>'.st.et.'<CR>}'
+exec 'Snippet else else<CR>{<CR>'.st.et.'<CR>}'
+exec 'Snippet { {<CR>'.st.et.'<CR>}'
Index: vimconfig/.vim/after/ftplugin/gsp.vim
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ vimconfig/.vim/after/ftplugin/gsp.vim	2009-01-16 18:04:28.000000000 +0100
@@ -0,0 +1,9 @@
+if !exists ('b:fts')
+    let b:fts = ['gsp', 'xhtml', 'javascript', 'css']
+    let b:curft = 1
+
+    nnoremap <silent> <buffer> <F10> :exec ':setf ' . b:fts[b:curft] . '\|:let b:curft = (1 + ' . b:curft . ')%' . len(b:fts)<CR>
+endif
+
+runtime after/ftplugin/xml.vim
+runtime after/ftplugin/html_snippets.vim
Index: vimconfig/.vim/after/ftplugin/gsp_snippets.vim
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ vimconfig/.vim/after/ftplugin/gsp_snippets.vim	2009-01-16 18:04:28.000000000 +0100
@@ -0,0 +1,16 @@
+if !exists('loaded_snippet') || &cp
+    finish
+endif
+
+let st = g:snip_start_tag
+let et = g:snip_end_tag
+let cd = g:snip_elem_delim
+
+exec 'Snippet % <%'.st.et.'%>'.st.et
+exec 'Snippet $ ${'.st.et.'}'.st.et
+exec 'Snippet con controller="'.st.et.'"'.st.et
+exec 'Snippet ac action="'.st.et.'"'.st.et
+exec 'Snippet link <g:link controller="'.st.et.'" action="'.st.et.'">'.st.et.'</g:link>'
+exec 'Snippet rend <g:render template="'.st.et.'" />'.st.et
+exec 'Snippet msg <g:message code="'.st.et.'" />'.st.et
+exec "Snippet Msg message (code:'".st.et."')".st.et
Index: vimconfig/.vim/after/ftplugin/html.vim
===================================================================
--- vimconfig.orig/.vim/after/ftplugin/html.vim	2009-01-16 18:03:39.000000000 +0100
+++ vimconfig/.vim/after/ftplugin/html.vim	2009-01-16 18:04:28.000000000 +0100
@@ -1,6 +1,8 @@
-let b:fts = ['xhtml', 'javascript', 'css']
-let b:curft = 1
+if !exists ('b:fts')
+    let b:fts = ['xhtml', 'javascript', 'css']
+    let b:curft = 1
 
-nnoremap <silent> <buffer> <F10> :exec ':setf ' . b:fts[b:curft] . '\|:let b:curft = (1 + ' . b:curft . ')%' . len(b:fts)<CR>
+    nnoremap <silent> <buffer> <F10> :exec ':setf ' . b:fts[b:curft] . '\|:let b:curft = (1 + ' . b:curft . ')%' . len(b:fts)<CR>
+endif
 
 runtime after/ftplugin/xml.vim
Index: vimconfig/.vim/after/ftplugin/html_snippets.vim
===================================================================
--- vimconfig.orig/.vim/after/ftplugin/html_snippets.vim	2009-01-16 18:03:39.000000000 +0100
+++ vimconfig/.vim/after/ftplugin/html_snippets.vim	2009-01-16 18:04:28.000000000 +0100
@@ -55,3 +55,11 @@
 exec "Snippet input <input type=\"".st.et."\" name=\"".st.et."\" value=\"".st.et."\" ".st.et."/>".st.et
 exec "Snippet style <style type=\"text/css\" media=\"screen\"><CR>/* <![CDATA[ */<CR>".st.et."<CR>/* ]]> */<CR></style><CR>".st.et
 exec "Snippet base <base href=\"".st.et."\"".st.et." />".st.et
+
+exec 'Snippet br <br />'.st.et
+exec 'Snippet cl class="'.st.et.'"'.st.et
+exec 'Snippet kv '.st.'key'.et.'="'.st.'value'.et.'"'.st.et
+exec 'Snippet id id="'.st.et.'"'.st.et
+exec 'Snippet ns <'.st.et.':'.st.et
+exec 'Snippet " "'.st.et.'"'.st.et
+exec "Snippet ' '".st.et."'".st.et
Index: vimconfig/.vim/after/ftplugin/python_snippets.vim
===================================================================
--- vimconfig.orig/.vim/after/ftplugin/python_snippets.vim	2009-01-16 18:03:39.000000000 +0100
+++ vimconfig/.vim/after/ftplugin/python_snippets.vim	2009-01-20 16:35:55.000000000 +0100
@@ -182,7 +182,11 @@
 " Other multi statement templates
 " From Panos
 exec "Snippet ifn if __name__ == '".st."main".et."':<CR>".st.et
-exec "Snippet ifmain if __name__ == '__main__':<CR>".st.et
+exec "Snippet main if __name__ == '__main__':<CR>".st.et
+exec "Snippet if if ".st."condition".et.":<CR><Tab>".st."pass".et."<CR>".st.et
+exec "Snippet elif elif ".st."condition".et.":<CR><Tab>".st."pass".et."<CR>".st.et
+exec "Snippet else else:<CR><Tab>".st."pass".et."<CR>".st.et
+exec "Snippet ?: (".st."cond".et." and [".st."case1".et."] or [".st."case2".et."])[0]".st.et
 
 " Shebang
 exec "Snippet sb #!/usr/bin/env python<CR># -*- coding: ".st."encoding".et." -*-<CR>".st.et
@@ -190,6 +194,8 @@
 " From Kib2
 exec "Snippet sbl1 #!/usr/bin/env python<CR># -*- coding: Latin-1 -*-<CR>".st.et
 
+exec "Snippet dbg dbg = file ('/tmp/debug', 'a')<CR>try:<CR>dbg.write ('".st.et.": %s\\n' % (".st.et.", ))<CR>except:<CR>import traceback<CR>dbg.write (traceback.format_exc ())<CR><BS>dbg.close ()"
+
 " Unit tests.
 exec "Snippet unittest if __name__ == '__main__':
 \<CR>import unittest
Index: vimconfig/.vim/after/ftplugin/ruby_snippets.vim
===================================================================
--- vimconfig.orig/.vim/after/ftplugin/ruby_snippets.vim	2009-01-16 18:03:39.000000000 +0100
+++ vimconfig/.vim/after/ftplugin/ruby_snippets.vim	2009-01-16 18:04:28.000000000 +0100
@@ -30,3 +30,4 @@
 exec "Snippet rejecto reject do |".st."element".et."| <CR>".st."element".et.".".st.et."<CR>end<CR>".st.et
 exec "Snippet inject inject(".st."object".et.") { |".st."injection".et.", ".st."element".et."| ".st.et." }<CR>".st.et
 exec "Snippet select select { |".st."element".et."| ".st."element".et.".".st.et." }<CR>".st.et
+exec "Snippet req require '".st."module".et."'".st.et
Index: vimconfig/.vim/after/ftplugin/sh_snippets.vim
===================================================================
--- vimconfig.orig/.vim/after/ftplugin/sh_snippets.vim	2009-01-16 18:03:39.000000000 +0100
+++ vimconfig/.vim/after/ftplugin/sh_snippets.vim	2009-01-16 18:04:28.000000000 +0100
@@ -10,3 +10,17 @@
 exec "Snippet if if [[ ".st."condition".et." ]]; then<CR>".st.et."<CR>fi".st.et
 exec "Snippet elif elif [[ ".st."condition".et." ]]; then<CR>".st.et
 exec "Snippet for for (( ".st."i".et." = ".st.et."; ".st."i".et." ".st.et."; ".st."i".et.st.et." )); do<CR>".st.et."<CR>done".st.et
+exec 'Snippet var "${'.st."parameter".et.'}"'.st.et
+exec 'Snippet var- "${'.st."parameter".et.':-'.st.'usedefault'.et.'}"'.st.et
+exec 'Snippet var= "${'.st."parameter".et.':='.st.'assigndefault'.et.'}"'.st.et
+exec 'Snippet var? "${'.st."parameter".et.':?'.st.'errormsg'.et.'}"'.st.et
+exec 'Snippet var+ "${'.st."parameter".et.':+'.st.'subsitution'.et.'}"'.st.et
+exec 'Snippet var: "${'.st."parameter".et.':'.st.'offset'.et.'}"'.st.et
+exec 'Snippet var:: "${'.st."parameter".et.':'.st.'offset'.et.':'.st.'length'.et.'}"'.st.et
+exec 'Snippet var% "${'.st."parameter".et.'%'.st.'pattern'.et.'}"'.st.et
+exec 'Snippet var/ "${'.st."parameter".et.'/'.st.'pattern'.et.'/'.st.'string'.et.'}"'.st.et
+exec 'Snippet var# "${'.st."parameter".et.'#'.st.'pattern'.et.'}"'.st.et
+exec 'Snippet varl "${#'.st."parameter".et.'}"'.st.et
+exec 'Snippet prefix "${!'.st."prefix".et.st.'starORat'.et.'}"'.st.et
+exec 'Snippet name "${!'.st."name".et.'['.st.'starORat'.et.']}"'.st.et
+exec 'Snippet $( $( '.st.'command'.et.' )'.st.et
Index: vimconfig/.vim/after/ftplugin/xhtml_snippets.vim
===================================================================
--- vimconfig.orig/.vim/after/ftplugin/xhtml_snippets.vim	2009-01-16 18:03:39.000000000 +0100
+++ vimconfig/.vim/after/ftplugin/xhtml_snippets.vim	2009-01-16 18:04:28.000000000 +0100
@@ -11,6 +11,7 @@
 exec "Snippet head  <head><CR>".st.et."<CR></head>".st.et
 exec "Snippet script <script type=\"text/javascript\" language=\"<javascript>\" charset=\"".st.et."\"><CR>// <![CDATA[<CR>".st.et."<CR>// ]]><CR></script>".st.et
 exec "Snippet html <html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"".st."en".et."\"<CR>lang=\"".st."en".et."\"><CR>".st.et."<CR></html>"
+exec "Snippet h2 <h2>".st.et."</h2>".st.et
 exec "Snippet h3 <h3>".st.et."</h3>".st.et
 exec "Snippet h4 <h4>".st.et."</h4>".st.et
 exec "Snippet h5 <h5>".st.et."</h5>".st.et
Index: vimconfig/.vim/after/ftplugin/xul.vim
===================================================================
--- vimconfig.orig/.vim/after/ftplugin/xul.vim	2009-01-16 18:03:39.000000000 +0100
+++ vimconfig/.vim/after/ftplugin/xul.vim	2009-01-16 18:04:28.000000000 +0100
@@ -1,6 +1,8 @@
-let b:fts = ['xul', 'javascript', 'python']
-let b:curft = 1
+if !exists ('b:fts')
+    let b:fts = ['xul', 'javascript', 'python']
+    let b:curft = 1
 
-nnoremap <silent> <buffer> <F10> :exec ':setf ' . b:fts[b:curft] . '\|:let b:curft = (1 + ' . b:curft . ')%' . len(b:fts)<CR>
+    nnoremap <silent> <buffer> <F10> :exec ':setf ' . b:fts[b:curft] . '\|:let b:curft = (1 + ' . b:curft . ')%' . len(b:fts)<CR>
+endif
 
 runtime after/ftplugin/xml.vim
Index: vimconfig/.vim/after/ftplugin/php_snippets.vim
===================================================================
--- vimconfig.orig/.vim/after/ftplugin/php_snippets.vim	2009-01-16 18:03:39.000000000 +0100
+++ vimconfig/.vim/after/ftplugin/php_snippets.vim	2009-01-16 18:04:28.000000000 +0100
@@ -28,3 +28,4 @@
 exec "Snippet req require( '".st."file".et."' );<CR>".st.et
 exec "Snippet for for ( $".st."i".et."=".st.et."; $".st."i".et." < ".st.et."; $".st."i".et."++ )<CR>{ <CR>".st.et."<CR>}<CR>".st.et
 exec "Snippet while while ( ".st.et." )<CR>{<CR>".st.et."<CR>}<CR>".st.et
+exec "Snippet dbg file_put_contents ('/tmp/debug', ".st.et.".\"\\n\", FILE_APPEND);"
