*config.txt*      Description of configuration and plugins of this vim config.
			Vim version 7.3

			by Jan Christoph Ebersbach

==============================================================================

                             Contents                               *config*

1. General Information				|config-information|
2. Plugins					|config-plugin|
    2.1.  Abolish				|config-abolish|
    2.2.  Airline				|config-airline|
    2.3.  BufStop				|config-bufstop|
    2.4.  CamelCaseMotion			|config-camelcasemotion|
    2.5.  Capitalize				|config-capitalize|
    2.6.  Cd					|config-cd|
    2.7.  Clam					|config-clam|
    2.8.  Commentary				|config-commentary|
    2.9.  CountJump				|config-CountJump|
    2.10. CtrlP 				|config-ctrlp|
    2.11. Dict					|config-dict|
    2.12. diffwindow movent			|config-diffwindow_movement|
    2.13. DrawIt				|config-drawit|
    2.14. editqf				|config-editqf|
    2.15. eunuch				|config-eunuch|
    2.16. fugitive				|config-fugitive|
    2.17. gnupg					|config-gnupg|
    2.18. gundo					|config-gundo|
    2.19. Helpwrapper				|config-helpwrapper|
    2.20. Hier          			|config-hier|
    2.21. Highlight_pmt				|config-highlight_pmt|
    2.22. ipi					|config-ipi|
    2.23. LanguageTool				|config-LanguageTool|
    2.24. LastMod				|config-lastmod|
    2.25. lastpos				|config-lastpos|
    2.26. LaTeX Tool Box			|config-latex-box|
    2.27. LiteTabPage				|config-LiteTabePage|
    2.28. Lusty Explorer			|config-lusty|
    2.29. misc	 				|config-misc|
    2.30. multiedit				|config-multiedit|
    2.31. Obsession				|config-obsession|
    2.32. Pathogen				|config-pathogen|
    2.33. Pydoc					|config-Pydoc|
    2.34. qf toggle				|config-qftoggle|
    2.35. RangerChooser				|config-ranger|
    2.36. repeat				|config-repeat|
    2.37. ReplaceWithRegister			|config-ReplaceWithRegister|
    2.38. repmo					|config-repmo|
    2.39. RFC					|config-rfc|
    2.40. sensible				|config-sensible|
    2.41. SH					|config-sh|
    2.42. Shooting star    			|config-shootingstar|
    2.43. Space					|config-space|
    2.44. speeddating				|config-speeddating|
    2.45. StarRange    				|config-starrange|
    2.46. Surround				|config-Surround|
    2.47. Syntastic				|config-Syntastic|
    2.48. Tabular				|config-tabular|
    2.49. tagbar				|config-tagbar|
    2.50. textobj-user				|config-textobj-user|
    2.51. textobj-uri				|config-textobj-uri|
    2.52. UltiSnips				|config-UltiSnips|
    2.53. unimpaired				|config-unimpaired|
    2.54. utl					|config-utl|
    2.55. VisIncr				|config-VisIncr|
    2.56. yankstack				|config-yankstack|
    2.57. YouCompleteMe				|config-YouCompleteMe|
    2.58. ZoomWin				|config-ZoomWin|
3. Filetype Plugins				|config-ftplugin|
    3.1. JavaScript				|config-javascript|
    3.2. vim-orgmode				|config-orgmode|
    3.3. rfc					|config-ftrfc|
4. Colorschemes					|config-colorscheme|
    4.1. peaksea				|config-peaksea|
    4.2. molokai				|config-molokai|
    4.3. solarized				|config-solarized|
5. Syntax					|config-syntax|
    5.1. asciidoc				|config-asciidoc|
    5.2. Coloresque				|config-coloresque|
    5.3. polyglot				|config-polyglot|
    5.4. txtbrowser				|config-txtbrowser|

==============================================================================

GENERAL INFORMATION				*config-information*

Hello and welcome to my vim configuration. I hope this document will help you
to find a way through the whole thing. My configuration is under constant
improvement. I try to keep up with the changes at vim.org and always have an
eye on the plugin section to find even better plugins.

Why do I do all this? - Once I figured out the Lisp and Emacs is not my way of
editing files and found vim, I decided to stick with it. In fact after
following vimtutor (just run the command in a terminal) for half an hour vim
came extremely easy and just the way I never dared to dream about text
editing! - Want to see what I'm talking about? Have a look at this
presentation: http://vimcasts.org/episodes/modal-editing-undo-redo-and-repeat/

What's next? - My workflow:
I have to admit that a plain vim without any configuration is sufficient in
most situations on remote systems. I normally just set the following options
and then I'm read for action:
set hidden ignorecase hlsearch noswap
syn on

But for serious editing tasks I miss the following things:

- easy to use file and directory browser
- fast restoration of a former work environment alias  session handling
- an effective and visually attractive default configuration
- support when editing text by word suggestions and snippets
- little helper tools for various tasks

Fortunately vim provides all this through its plugin system. Over the years I
built a rather big vimrc and a larger .vim directory containing heaps of
plugins. At some point I decided to set up a git repository to hold my
configuration so that I can easily at work, at home and when I'm traveling.
The specialty of my vim configuration is that it ships with all the plugins
I'm using. This makes it usable from the first time it's checked out. It also
provides a way for me to fix broken or unwanted behavior in plugins without
interfering with upstream development.

To keep up with upstream development I regularly perform an update and also
adjust the patches I maintain. In the "patches" directory the patches are
stored. I use quilt to apply and update the patches it would therefore be
helpful to install it and run
	quilt push -a
before using vim for the first time. Before fetching the newest changes
	quilt pop -a
should be run to unapply all patches and have a clean repository.

So what did I change? In some cases I changed the default vim behavior
because didn't really fit my needs. All the changes can be found at
<url:~/.vim/keybindings.vim#tn=Changes To The Default Behavior:> (moving the
cursor on the url and pressing "gl" opens the file at the position that
contains the changes).

General key bindings are found in the section
<url:~/.vim/keybindings.vim#tn=Keymappings:> and key bindings related to
plugins in section |config-plugin|.

Other than that it's highly important to me to provide a way to including
personal settings without having to it on a repository.  At the end of
.vimrc the file personal.vim is sourced that may contain personal settings
(<url:~/.vimrc#tn=Personal Settings:>). Here is an example
for personal.vim:

				*config-personal* *config-personal.vim*
	" EmailAddress query program
	let g:emailAddrQueryProg = "~/bin/vcardquery.py --email="

	" Personal settings
	let g:userName      = "Your Surname"
	let g:userGivenName = "Your given name"
	let g:snips_author  = g:userGivenName.' '.g:userName
	let g:userStreet    = "Your street"
	let g:userCity      = "Your city"
	let g:userZip       = "Your zip"
	let g:userAddr      = g:userStreet."\n".g:userZip.' '.g:userCity
	let g:userPhone     = "Tel:.  : Your phone\nMobile : Your mobile"
	let g:userEmail     = "Your e-mail"
	let g:userWWW       = "http://www.example.com/"

==============================================================================

PLUGINS						*config-plugin*

A number of plugins are shipped with this vim configuration. The following
sections contain a brief overview with useful hints for using them. In
addition links to help files and plugins are completing the overview.

All plugins can be updated automatically via :GetLatestVimScripts. Have a look
<url:../GetLatest/GetLatestVimScripts.dat>.

2.1. |abolish| 					*config-abolish*

Create input abbreviations.
Command: :Abolish {abbr} {repl}	<- create an abbreviation
Mapping: cr[cm_u]	<- switch case

2.2. |airline|	 				*config-airline*

Good looking status line.

2.3. |Bufstop|					*config-bufstop*

Fast buffer switcher.
Mapping: <leader>b	<- Open BufstopFast
         <leader>a	<- Open BufstopModeFast

2.4. |CamelCaseMotion|				*config-camelcasemotion*

Helps to move through words written in camel case.
Mapping: w, e, b	<- move through a word

2.5. Capitalize					*config-capitalize*
						<url:../plugin/capitalize.vim>
Capitalize words like using g~, gu or gU
Mapping: gC	<- capitalize words

2.6. Cd						*config-cd*
						<url:../plugin/cd.vim>
Several commands dealing with directory changes.
Command: :Cd		<- change working directory to the currently edited file
	 :Lcd		<- like :Cd but only locally
	 :Cddeb		<- within a debian package, change to the root directory
	 :PathAdd	<- add the directory of the currently edited file to path
	 :PathRem	<- remove the directory of the currently edited file from path
	 :PathAdddeb	<- add debian root directory to path
	 :PathRemdeb	<- remove debian root directory to path

2.7. Clam					*config-clam*
A wrapper for executing command on the shell.
Command: :Clam		<- the results are placed in a new buffer
Mapping: <leader>r	<- shortcut for running clam

2.8. |commentary.txt|				*config-commentary*
Plugin for commenting/uncommenting code.
Mapping: gc<Move>	<- comment movement
         gcc		<- comment current line

2.9. |CountJump.txt|				*config-CountJump*
Library for writing custom movements.

2.10. |CtrlP|					*config-ctrlp*
Tool for browing files.
Mapping: C-p	<- open CtrlP

2.11. dict					*config-dict*
						<url:../plugin/dict.vim>
Run dict command on the current word and display the result.
Mapping: <leader>l	<- run dict command on the current word

2.12. diffwindow_movement			*config-diffwindow_movement*
						<url:../ipi/diffwindow_movement/plugin/diffwindow_movement.vim>
Complete vim's diffwindow moment functionality.
Mapping: ic	<- text object, inner change
         id	<- text object, inner difference - lines where just parts are different
         ]C	<- move to end of next change
         [C	<- move to end of previous change

2.13. |drawit|					*config-drawit*
Support for drawing in ASCII art in vim. Everything is basically done in
visual block mode (C-v). In conjunction with ditaa
(http://ditaa.sourceforge.net) this is very useful.
Mapping: \di	<- start drawing mode
         \ds	<- stop drawing mode
         \a	<- draw an arrow
         \b	<- draw a box
         \l	<- draw a line

2.14. |editqf|					*config-editqf*
Make quickfix list editable.
Command: QFSave FILE	<- save quickfix list to a file
         QFLoad FILE	<- load quickfix list from a file
Mapping: i		<- i pressed in the quickfix window opens the entries in another window for editing
         <leader>n	<- add note with line number to quickfix list
         <leader>N	<- add note matching the pattern of the line to quickfix list

2.15. |eunuch|					*config-eunuch*
Vim sugar for the UNIX shell commands that need it the most.

2.16. |fugitive|				*config-fugitive*
Git plugin that gives great control over git.
Mapping: Gstatus	<- open git status window with the ability to display changes and add/remove files from the index
         Gcommit	<- open window for commiting changes
         Gdiff		<- compare previous version of a file using vim's diff
         		   functionality
         Gbrowse	<- browse the history of the repository
         Git		<- general interface to the vim command
         <there are many more commands>

2.17. gnupg 					*config-gnupg*
						<url:../bundle/gnupg/plugin/gnupg.vim>
Adds GnuPG support to vim. Just open encrypted files and edit them like normal
after entering the passphrase.

2.18. |Gundo-contents| 				*config-gundo*
Gundo makes vim's undo tree browsable.
Mapping: <leader>u	<- toggle gundo tree
Command: :GundoToggle

2.19. Helpwrapper 				*config-helpwrapper*
						<url:../plugin/helpwrapper.vim>
A wrapper for different help commands like Man, Pydoc and vim-help. The
actual help system is depends on the context/filetype.
Mapping: K			<- open help for the word the cursor is on
Command: :Help TOPIC [command]	<- open help for TOPIC

2.20. |hier|          				*config-hier*
Highlight quickfix errors and location list entries in current buffer.
Everything should be done automatically. The start and stop commands might be
of interest to disable highlighting temporarily.
Command: :HierStart	<- start highlighting (is run by default)
	 :HierStop	<- stop highlighting

2.21. Highlight_pmt 				*config-highlight_pmt*
						<url:../plugin/highlight_pmt.vim>
Passive plugin that highlights print margin and trailing spaces.

2.22. ipi					*config-ipi*
Plugin to load plugins later.
Command: :IP [PLUGINS]	<- Load plugins

2.23. |LanguageTool|				*config-LanguageTool*
Run a grammer check on the current buffer and highlight mistakes.
Command: :LanguageToolCheck	<- perform a grammer check
	 :LanguageToolClear	<- clear the highlighted mistakes

2.24. |LastMod| 				*config-lastmod*
						<url:../plugin/lastmod.vim>
Plugin that updates lines containing the string "Last Modified:" with the
current date and time.
Command: :UpdateLastModified	<- update Last Modified string

2.25. lastpos					*config-lastpos*
						<url:../bundle/lastpos/plugin/lastpos.vim>
Plugin to position the cursor on the line and column where it was when the
user left the buffer.

2.26. |latex-box|				*config-latex-box*
Simple tool box for LaTeX. It provides mainly in-text completion via
<c-x><c-o> and several commands for compiling LaTeX documents. Make sure you
install the "latexmk" program to be able to compile latex documents.
Mapping: <leader>ll	<- compile the currently edited file
	 <leader>lc	<- clean temporary compilation files
	 <leader>lv	<- display output pdf file by xpdf or other
			 viewer |g:LatexBox_viewer|

2.27. LiteTabPage				*config-LiteTabePage*
						<url:../bundle/LiteTabPage/plugin/LiteTabPage.vim>
Ships a number of improvements for displaying and navigating tabs.
Mapping: <A-NUMBER>	<- switch to tab NUMBER

2.28. Lusty Explorer				*config-lusty*
						<url:../ipi/lusty/plugin/lusty-explorer.vim>
Two plugins for dealing with buffers.
Mapping: <leader>f	<- Explorer for the current directory
	 <leader>F	<- Explorer for directory of the current file
	 <leader>g	<- Grep through the open buffers

2.29. |misc.txt|				*config-misc*
Helper library.

2.30. multiedit					*config-multiedit*
						<url:../plugin/multiedit.vim>
Edit multiple files with the well known commands.
Command: :E	<- edit multiple files
	 :Sp	<- edit multiple files in split windows
	 :Vs	<- edit multiple files in vertically split windows

2.31. |obsession| 				*config-obsession*
Straight forward session manager.
Command: :Obession {file}  <- Start writing a session
         :source {file}    <- Load a session

2.32. Pathogen 					*config-pathogen*
						<url:../autoload/pathogen.vim>
Plugin manager that allows to keep all plugins in separate directories.
Putting the following code in the vimrc enables pathogen:
>
	filetype off
	call pathogen#runtime_append_all_bundles()
	filetype plugin indent on
<

2.33. Pydoc 					*config-Pydoc*
						<url:../ipi/pydoc910/plugin/pydoc.vim>
Adds funktionality to display python documentation in vim.
Command: :Pydoc TERM	<- open python documentation for term
Mapping: <leader>pw	<- open python documentation for word under cursor
	 <leader>Pw	<- open python documentation for WORD under cursor

2.34. qf toggle 				*config-qftoggle*
						<url:../plugin/qf_toggle.vim>
Toggle quickfix window.
Mapping: <leader>q	<- toggle quickfix window

2.35. RangerChooser				*config-ranger*
						<url:../bundle/ranger/plugin/ranger.vim>
Start ranger to open files in vim.
Mapping: cr	<- start RangerChooser

2.36. repeat 					*config-repeat*
						<url:../bundle/repeat/autoload/repeat.vim>
Repeat last surround or speeddating command with normal "." mapping.
Mapping: .	<- repeat last surround command

2.37. |ReplaceWithRegister| 			*config-ReplaceWithRegister*
Replace text with the contents of a register. By default the unnamed register
"" is used.
Mapping: ["x]gr		<- replace visually selected text with the contents of register
         ["x]gr{motion}	<- replace motion with the contents of register
         ["x]grr	<- replace lines with contents

2.38. repmo 					*config-repmo*
						<url:../bundle/repmo/plugin/repmo.vim>
Repeat last normal mode motion by pressing.
Mapping: <Space>	<- repeat motion in the same direction
	 <BS>		<- repeat motion in the opposite direction

2.39. RFC 					*config-rfc*
						<url:../bundle/rfc/plugin/rfc.vim>
Easily open RFCs within vim. It integrates also with the rfc plugin
<url:../bundle/rfc/ftplugin/rfc.vim>
Command: :RFC <rfcnumber>	<- open RFC

2.40. sensible 					*config-sensible*
						<url:../config/sensible.vim>
Sensible default settings for vim.

2.41. SH	 				*config-sh*
						<url:../plugin/sh.vim>
Opens a terminal emulator.
Command: :Sh	<- open a terminal in the current working directory
	 :SH	<- open a terminal in the directory of the current file

2.42. Shooting star				*config-shootingstar*
						<url:../bundle/shootingstar/plugin/shootingstar.vim>
Add keybindings for searching word under cursor, matching at the cursor
position.
Mapping: \*	<- forward search for word, matching at cursor position
         \#	<- backward search for word, matching at cursor position

2.43. Space	 				*config-space*
						<url:../plugin/space.vim>
Mappings for dealing with spaces.
Mapping: dst	<- kill trainling spaces (also in visual mode)
	 dsi	<- kill inner spaces so that just one is left (also in visual mode)

2.44. |speeddating|				*config-speeddating*
Use <c-x> and <c-a> on other formats than decimal numbers, e.g. date and time.
Mapping: <c-a>	<- increase number under cursor
	 <c-x>	<- decrease number under cursor

2.45. StarRange					*config-starrange*
						<url:../bundle/starrange/plugin/starrange.vim>
Add keybindings for visual search.
Mapping: *	<- forward search for the visually selected term
         #	<- backward search for the visually selected term

2.46. |surround|				*config-Surround*
Surround arbitrary text with other text ys|movement|<SURROUNDINGTEXT> or
s<SURROUNDINGTEXT> in visual mode.
Mapping: ys|movement|<SURROUNDINGTEXT>	<- surround movement in visual mode
	 with surrounding text. WARNING: ys is not repeatable via "." use cs
	 instead!
	 s<SURROUNDINGTEXT>	<- surround selected text in visual mode with
	 surrounding text
	 ds|movement|<SURROUNDINGTEXT>	<- deletes surrounding text
	 cs|movement|<SURROUNDINGTEXT>	<- change surrounding text. cs is
	 repeatable with "."

2.47. |syntastic|				*config-Syntastic*
Syntax checker for arbitrary languages.

2.48. |tabular|					*config-tabular*
Plugin to align text at the specified pattern. It's a replacement for the
Align plugin.
Command: :Tabularize /PATTERN[/ALIGNMENT]

2.49. |tagbar|					*config-tagbar*
Display tags of the open files in a separate window.
Command: :TagbarToggle

2.50. |textobj-user|				*config-textobj-user*
Library for building text objects.

2.51. |textobj-uri|				*config-textobj-uri*
Text object for dealing with URIs.
Mapping: au	<- Text object, matches a whole URI, including trailing spaces
         iu	<- Text object, matches a whole URI
         go	<- Open URI with the specified handler

2.52. |UltiSnips|				*config-UltiSnips*
Python implementation for expanding snippets. This plugin is very similar to
snipMate and other plugins.
Command: :py UltiSnips_Manager.reset()	<- Reload snippets
	 :UltiSnipsReset		<- Handy command for reloading snippets
Mapping: <Tab>				<- Expand the snippet before the cursor
	 <C-j>				<- Jump to next element during snippet expansion
	 <C-k>				<- Jump to previous element during snippet expansion
	 <C-Tab>			<- List available snippets

2.53. |unimpaired|				*config-unimpaired*
Mappings for navigating and transforming buffers, quickfix and text.
Mapping: |[a| 		<- |:previous|
	 |]a| 		<- |:next|
	 |[A| 		<- |:first|
	 |]A| 		<- |:last|
	 |[b| 		<- |:bprevious|
	 |]b| 		<- |:bnext|
	 |[B| 		<- |:bfirst|
	 |]B| 		<- |:blast|
	 |[l| 		<- |:lprevious|
	 |]l| 		<- |:lnext|
	 |[L| 		<- |:lfirst|
	 |]L| 		<- |:llast|
	 |[<C-L>|	<- |:lpfile|
	 |]<C-L>|	<- |:lnfile|
	 |[q| 		<- |:cprevious|
	 |]q|		<- |:cnext|
	 |[Q|		<- |:cfirst|
	 |]Q|		<- |:clast|
	 |[<C-Q>|	<- |:cpfile|
	 |]<C-Q>|	<- |:cnfile|
	 |[t|		<- |:tprevious|
	 |]t|		<- |:tnext|
	 |[T|		<- |:tfirst|
	 |]T|		<- |:tlast|

	 |[f|		<- Go to the file preceding the current one
	 		   alphabetically in the current file's directory.
	 |]f|		<- Go to the file succeeding the current one
	 		   alphabetically in the current file's directory.
	 |[n|		<- Go to the previous SCM conflict marker.  Try d[n
	 		   inside a conflict.
	 |]n|		<- Go to the next SCM conflict marker.  Try d]n inside
	 		   a conflict.
	 |[<Space>|	<- Add [count] blank lines above the cursor.
	 |]<Space>|	<- Add [count] blank lines below the cursor.
	 |[e|		<- Exchange the current line with [count] lines above
	 		   it.
	 |]e|		<- Exchange the current line with [count] lines below
	 		   it.
	 |[x{motion}|	<- XML encode.
	 |]x{motion}|	<- XML decode.  HTML entities are handled as well.
	 |[u{motion}|	<- URL encode.
	 |]u{motion}|	<- URL decode.
	 |[y{motion}|	<- C String encode.  Backslash escape control
	 		   characters, quotation marks, and backslashes.
	 |]y{motion}|	<- C String decode.

2.54. |utl|					*config-utl*
Universal text linking plugin.
Mapping: gl	<- follow link under cursor
	 gcc	<- copy the link under the cursor to clipboard

Examples:
<url:#r=here>	<- takes you to text "id=here"
<url:#tn=here> or <url:#tn=here>	<- jump to the first search occurrence of "here"
<url:#line=15>	<- takes you to line 15
<url:vimscript:COMMAND>	<- execute the vim command COMMAND

2.55. |visincr|					*config-VisIncr*
Produce increasing/decreasing columns of numbers, dates, or daynames.
Command: :I	<- run in |visual-block|-mode on a number of lines
         :II	<- align the numbers right

2.56. |yankstack|				*config-yankstack*
Yankstack emulates Emacs' yankring.
Command: :Yanks		<- print yankstack contents
Mapping: <M-p>/<M-S-p>	<- jump to the next/previous item in the ring
			   after paste command (p)

2.57. |YouCompleteMe|				*config-YouCompleteMe*
Auto completion plugin.
Mapping: <Tab>	<- select a completion

2.58. |zoomwin-usage|				*config-ZoomWin*
Add restore functionality to the |:only| command.
Mapping: <ctrl-w>o	<- press once to switch to only mode and a second time
			   to restore the other windows

==============================================================================

FILETYPE PLUGINS				*config-ftplugin*

3.1. javascript					*config-javascript*
						<url:../bundle/javascript/README.md>
JavaScript indentation and syntax highlighting.

3.2. |org|					*config-orgmode*
Clone of Emacs' orgmode plugin. It's a complex mode, a description of the
keybindings and options is found in the |org| help file.

3.3. rfc					*config-ftrfc*
						<url:../bundle/rfc/ftplugin/rfc.vim>
RFC syntax highlighting and a command to traverse links within the document.
Mapping: <C-]>	<- traverse link in ToC

==============================================================================

COLORSCHEMES					*config-colorscheme*

4.1. peaksea					*config-peaksea*
						<url:../colors/peaksea.vim>
Best colorscheme ever! In this configuration the light background version is
used.

4.2. molokai					*config-molokai*
						<url:../colors/molokai.vim>
A dark colorscheme.

4.3. solarized					*config-solarized*
						<url:../colors/solarized.vim>
Another very good colorscheme for light and dark backgrounds.

==============================================================================

SYNTAX						*config-syntax*

5.1. asciidoc					*config-asciidoc*
						<url:../bundle/asciidoc/syntax/asciidoc.vim>
Asciidoc syntax highlighting.

5.2. Coloresque					*config-coloresque*
						<url:../bundle/coloresque/README.md>
Colorize color definitions in arbitrary file types.

5.3. polyglot					*config-polyglot*
						<url:../bundle/polyglot/README.md>
Several syntax files in one plugin.

5.4. |txtbrowser@en|				*config-txtbrowser*
Text file syntax highlighting in addition with a |taglist.txt| extension to
make text files browsable. It also contains a plugin which I disabled
(<url:../plugin_config.vim#txtbrowser_disabled>) for it doesn't seem
to add anything to my workflow.

vi: ft=help:tw=78:sw=8:ts=8:noet
