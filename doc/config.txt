*config.txt*      Description of configuration and plugins of this vim config.

	                by Jan Christoph Ebersbach

==============================================================================

                             Contents                               *config*

1. General Information				|config-information|
1. Plugins					|config-plugin|
    2.1. Align					|config-align|
    2.2. Cd					|config-cd|
    2.3. Cdargs					|config-cdargs|
    2.4. Diff2qf				|config-Diff2qf|
    2.5. Doxygen Toolkit			|config-DoxygenToolkit|
    2.6. Editqf					|config-Editqf|
    2.7. Fastwordcompleter			|config-Fastwordcompleter|
    2.8. Find					|config-Find|
    2.9. FuzzyFinder				|config-FuzzyFinder|
    2.10. gnupg					|config-gnupg|
    2.11. gundo					|config-gundo|
    2.12. Highlight_pmt				|config-highlight_pmt|
    2.13. highlight				|config-highlight|
    2.14. IndentAnything			|config-IndentAnything|
    2.15. LanguageTool				|config-LanguageTool|
    2.16. LastMod				|config-lastmod|
    2.17. LaTeX Tool Box			|config-latex-box|
    2.18. LiteTabPage				|config-LiteTabePage|
    2.19. multiedit				|config-multiedit|
    2.20. NarrowRegion				|config-NarrowRegion|
    2.21. NERDCommenter				|config-NERDCommenter|
    2.22. NERDTree				|config-NERDTree|
    2.23. Patches				|config-patches|
    2.24. py2stdlib				|config-py2stdlib|
    2.25. Pydoc					|config-Pydoc|
    2.26. pythonhelper				|config-pythonhelper|
    2.27. qfn					|config-qfn|
    2.28. ragtag				|config-ragtag|
    2.29. repeat				|config-repeat|
    2.30. RFC					|config-rfc|
    2.31. Scratch				|config-scratch|
    2.32. Save					|config-save|
    2.33. Session				|config-session|
    2.34. SH					|config-sh|
    2.35. Space					|config-space|
    2.36. speeddating				|config-speeddating|
    2.37. SudoEdit				|config-SudoEdit|
    2.38. Supertab				|config-Supertab|
    2.39. Surround				|config-Surround|
    2.40. taglist				|config-taglist|
    2.41. toggle				|config-toggle|
    2.42. txtfmt				|config-txtfmt|
    2.43. utl					|config-utl|
    2.44. UltiSnips				|config-UltiSnips|
    2.45. vcscommand				|config-vcscommand|
    2.46. vimcalc				|config-vimcalc|
    2.47. VisIncr				|config-VisIncr|
    2.48. Words					|config-words|
    2.49. yankring				|config-yankring|
    2.50. ZoomWin				|config-ZoomWin|
    2.51. vimoutliner				|config-vimoutliner|
3. Filetype Plugins				|config-ftplugin|
    3.1. javascript				|config-javascript|
    3.2. pep8					|config-pep8|
    3.3. xml					|config-xml|
4. Colorschemes					|config-colorscheme|
    4.1. peaksea				|config-peaksea|
5. Syntax					|config-syntax|
    5.1. asciidoc				|config-asciidoc|
    5.2. json					|config-json|
    5.3. markdown				|config-markdown|
    5.4. txtbrowser				|config-txtbrowser|

==============================================================================

GENERAL INFORMATION				*config-information*

Hello and welcome to my vim configuration. I hope this document will help you
to find a way through the whole thing. My configuration is under constant
improvement. I try to keep up with the changes at vim.org and always have an
eye on the plugin section to find even better plugins.

Why do I do all this? - Once I figured out the Lisp and Emacs is not my way of
editing files and found vim, I decided to stick with it. In fact after
following vimtutor (just run the command in a terminal) for half an hour vim
came extremely easy and just the way I never dared to dream about text
editing! - Want to see what I'm talking about? Have a look at this
presentation: http://vimcasts.org/episodes/modal-editing-undo-redo-and-repeat/

What's next? - My workflow:
I have to admit that a plain vim without any configuration is sufficient in
most situations on remote systems. I normally just set the following options
and then I'm read for action:
set hidden ignorecase hlsearch noswap
syn on

But for serious editing tasks I miss the following things:

- easy to use file and directory browser
- fast restoration of a former work environment alias  session handling
- an effective and visually attractive default configuration
- support when editing text by word suggestions and snippets
- little helper tools for various tasks

Fortunately vim provides all this through its plugin system. Over the years I
built a rather big vimrc and a larger .vim directory containing heaps of
plugins. At some point I decided to set up a git repository to hold my
configuration so that I can easily at work, at home and when I'm traveling.
The specialty of my vim configuration is that it ships with all the plugins
I'm using. This makes it usable from the first time it's checked out. It also
provides a way for me to fix broken or unwanted behavior in plugins without
interfering with upstream development.

To keep up with upstream development I regularly perform an update and also
adjust the patches I maintain. In the "patches" directory the patches are
stored. I use quilt to apply and update the patches it would therefore be
helpful to install it and run
	quilt push -a
before using vim for the first time. Before fetching the newest changes
	quilt pop -a
should be run to unapply all patches and have a clean repository.

So what did I change?
In some cases I changed the default vim behavior because didn't really fit my
needs. All the changes can be found at
<url:~/.vimrc#r=Changes to the default behavior> (moving the cursor on the url and
pressing "gl" opens the file at the position that contains the changes).

General key bindings are found in the section <url:~/.vimrc#r=Keymappings> and
key bindings related to plugins in section |config-plugin|.

Other than that it's highly important to me to provide a way to including
personal settings without having to it on a repository.  At the end of 
.vimrc the file personal.vim is sourced that may contain personal settings
(<url:~/.vimrc#r=Personal settings>). Here is an example
for personal.vim:

				*config-personal* *config-personal.vim*
	" EmailAddress query program
	let g:emailAddrQueryProg = "~/bin/vcardquery.py --email="

	" Personal settings
	let g:userName      = "Your Surname"
	let g:userGivenName = "Your given name"
	let g:snips_author  = g:userGivenName.' '.g:userName
	let g:userStreet    = "Your street"
	let g:userCity      = "Your city"
	let g:userZip       = "Your zip"
	let g:userAddr      = g:userStreet."\n".g:userZip.' '.g:userCity
	let g:userPhone     = "Tel:.  : Your phone\nMobile : Your mobile"
	let g:userEmail     = "Your e-mail"
	let g:userWWW       = "http://www.example.com/"

PLUGINS						*config-plugin*

A number of plugins are shipped with this vim configuration. The following
sections contain a brief overview with useful hints for using them. In
addition links to help files and plugins are completing the overview.

All plugins can be updated automatically via :GetLatestVimScripts. Have a look
<url:../GetLatest/GetLatestVimScripts.dat>.

2.1. |Align| 					*config-align*
Align text in arbitrary ways.
Command: :Align	<STRING>	<- align viually selected text at string

2.2. Cd						*config-cd*
						<url:../plugin/cd.vim>
Several commands dealing with directory changes.
Command: :Cd		<- change working directory to the currently edited file
	 :Lcd		<- like :Cd but only locally
	 :Cddeb		<- within a debian package, change to the root directory
	 :PathAdd	<- add the directory of the currently edited file to path
	 :PathRem	<- remove the directory of the currently edited file from path
	 :PathAdddeb	<- add debian root directory to path
	 :PathRemdeb	<- remove debian root directory to path

2.2. cdargs					*config-cdargs*
						<url:../bundle/cdargs/plugin/cdargs.vim>
Integrates cdargs plugin for fast directory changes.
Command: :Cdb <bookmark>	<- change working directory to bookmark
	 :Ca <bookmark>		<- add a bookmark to working directory

2.4. |diff2qf|					*config-Diff2qf*
Load a patch file into quickfix list to make it easily accessible.
Command: :Diff2qf <file>	<- load patch into qf (replace current qf)
	 :Diff2qfAppend <file>	<- load patch into qf (append to current qf)

2.5. DoxygenToolkit				*config-DoxygenToolkit*
						<url:../bundle/DoxygenToolkit/plugin/DoxygenToolkit.vim>
Toolkit for generating Doxygen documentation easily.
Command: :Dox		<- Generate Doxygen Documentation

2.6. |editqf|					*config-Editqf*
Make quickfix list editable.
Command: Write	<- any command executed in the editable qf list will close the
		window and reload the changed list into qf
	 Leave	<- any command that causes the cursor to leave the editable qf
		list will close the window and discard all changes
Mapping: i	<- i pressed in qf window opens qf list in another window

2.7. |fastwordcompleter|			*config-Fastwordcompleter*
Obsoleted by |config-neocomplcache|!
Supports writing by providing autocompletion for words.
Command: :FastWordCompletionStart	<- start word completion
	 :FastWordCompletionStop	<- stop word completion

2.8. Find					*config-Find*
						<url:../plugin/find.vim>
Integrate UNIX find command preconfigured for finding files, also in SCM
polluted directories.
Command: :Find <term>	<- find term and open files in quickfix window

2.9. |fuzzyfinder|				*config-FuzzyFinder*
Open files from a completion list. FuzzyFinder has been abandonded in favour
of LustyExplorer. Uses |l9| library.
Mapping: <leader>ff	<- open file completion in CWD
	 <leader>FF	<- open file completion in the directory of the current file
	 <leader>fd	<- change current working directory (CWD)
	 <leader>fb	<- browse buffers
	 <leader>fr	<- browse most recently used files
	 <leader>fR	<- renew cache

2.10. gnupg 					*config-gnupg*
						<url:../bundle/gnupg/plugin/gnupg.vim>
Adds GnuPG support to vim. Just open encrypted files and edit them like normal
after entering the passphrase.

2.11. |Gundo-contents| 					*config-gundo*
Gundo makes vim's undo tree browsable.
Mapping: <leader>u	<- toggle gundo tree
Command: :GundoToggle

2.12. Highlight_pmt 				*config-highlight_pmt*
						<url:../plugin/highlight_pmt.vim>
Passive plugin that highlights print margin and trailing spaces.

2.13. highlight 				*config-highlight*
						<url:../bundle/highlight/plugin/highlight.vim>
Highlight lines and words.
Mapping: <C-h><C-h>	<- highlight current line
	 <C-h><C-w>	<- highlight current word
	 <C-h><C-n>	<- clear all highlighing
	 <C-h><C-r>	<- clear last highlighing
	 <C-h><C-a>	<- advance to next pattern

2.14. |IndentAnything| 				*config-IndentAnything*
Library to make writing indentation scripts easier.

2.15. |LanguageTool|				*config-LanguageTool*
Run a grammer check on the current buffer and highlight mistakes.
Command: :LanguageToolCheck	<- perform a grammer check
	 :LanguageToolClear	<- clear the highlighted mistakes

2.16. |LastMod| 				*config-lastmod*
						<url:../plugin/lastmod.vim>
Passive plugin that updates lines containing the string "Last Modified:" with
the current date and time.

2.17. |latex-box|				*config-latex-box*
Simple tool box for LaTeX. It provides mainly in-text completion via
<c-x><c-o> and several commands for compiling LaTeX documents. Make sure you
install the "latexmk" program to be able to compile latex documents.
Mapping: <leader>ll	<- compile the currently edited file
	 <leader>lc	<- clean temporary compilation files
	 <leader>lv	<- display output pdf file by xpdf or other
			 viewer |g:LatexBox_viewer|

2.18. LiteTabPage				*config-LiteTabePage*
						<url:../bundle/LiteTabPage/plugin/LiteTabPage.vim>
Ships a number of improvements for displaying and navigating tabs.
Mapping: <A-NUMBER>	<- switch to tab NUMBER

2.19. multiedit					*config-multiedit*
						<url:../plugin/multiedit.vim>
Edit multiple files with the well known commands.
Command: :E	<- edit multiple files
	 :Sp	<- edit multiple files in split windows
	 :Vs	<- edit multiple files in vertically split windows

2.20. |NarrowRegion|				*config-NarrowRegion*
Displays a selected region in a separate scratch buffer. All the changes you
make in that buffer can be saved back to the original buffer by simply saving
it.
Command: :NarrowRegion	<- Narrows region to the selected lines
Mapping: <leader>nr	<- Narrows region to the selected lines

2.21. |NERDCommenterContents|			*config-NERDCommenter*
Un-/comment lines.
Mapping: <leader><space>	<- toggle comment

2.22. |NERDTree-contents|			*config-NERDTree*
A file system explorer.
Command: :NERDTree	<- show NERDTree explorer
Mapping: <leader>e	<- toogle NERDTree explorer

2.23. Patches 					*config-patches*
						<url:../plugin/patches.vim>
Collection of commands dealing with failed patches.
Command: :Reject	<- open reject file (.rej)
	 :Orginal	<- open original file (.orig)
	 :Mine		<- open my file (.mine)
	 :Source	<- open source file

2.24. |py2stdlib| 				*config-py2stdlib*
Python standard library as vim help file.

2.25. Pydoc 					*config-Pydoc*
						<url:../bundle/pydoc910/plugin/pydoc.vim>
Adds funktionality to display python documentation in vim.
Command: :Pydoc TERM	<- open python documentation for term
Mapping: <leader>pw	<- open python documentation for word under cursor
	 <leader>Pw	<- open python documentation for WORD under cursor

2.26. pythonhelper 				*config-pythonhelper*
						<url:../bundle/pythonhelper/plugin/pythonhelper.vim>
Helps moving around in Python files with displaying the current function and
class in the status bar.

2.27. |qfn.txt|					*config-qfn*
Create notes in an error list with <leader>n, open the error list with :copen
and jump to the items later on. With :QFNSave the errorlist can be saved to a
file.
Command: :QFNSave FILENAME	<- save errorlist to file
Mapping: <leader>n	<- add note to errorlist

2.28. |ragtag| 					*config-ragtag*
Mappings to help edit XML/HTML based file types.
Mapping: <C-X>=	<- foo<%= ^ %>
	 <C-X>+	<- <%= foo^ %>
	 <C-X>-	<- foo<% ^ %>
	 <C-X>_	<- <% foo^ %>
	 <C-X>'	<- foo<%# ^ %> (mnemonic: ' is a comment in ASP VBS)
	 <C-X>"	<- <%# foo^ %>
	 <C-X><Space>	<- <foo>^</foo>
	 <C-X><CR>	<- <foo>\n^\n</foo>
	 <C-X>/	<- Last HTML tag closed
	 <C-X>!	<- <!DOCTYPE...>/<?xml ...?>
	 <C-X>@	<- <link rel="stylesheet" ...>
	 <C-X>#	<- <meta http-equiv="Content-Type" ... />
	 <C-X>$	<- <script src="/javascripts/^.js"></script>

2.29. repeat 					*config-repeat*
						<url:../bundle/repeat/autoload/repeat.vim>
Repeat last surround or speeddating command with normal "." mapping.
Mapping: .	<- repeat last surround command

2.30. RFC 					*config-rfc*
						<url:../plugin/rfc.vim>
Easily open RFCs within vim.
Command: :RFC <rfcnumber>	<- open RFC

2.31. Scratch 					*config-scratch*
						<url:../bundle/scratch664/plugin/scratch.vim>
Easily opens a scratch buffer to dump text in it.
Command: :Scartch	<- replace the current buffer by the scratch buffer
	 :Sscartch	<- open the scratch buffer in a split window
Mapping: <Space><Space>	<- toggle the scratch buffer in a split window

2.32. Save 					*config-save*
						<url:../plugin/save.vim>
Save the currently edited file under different name and delete the old file.
Command: :Save	<filename>	<- Save under filename

2.33. |session.txt| 				*config-session*
Plugin to deal with vim sessions. This plugin will succeed my quick hack
|config-sessions| which at the moment still works better and provides also
quickfix save and restore.
Command: :SaveSession [name]	<- save vim session under an optional name
	 :OpenSession [name]	<- restore a previously saved session
	 :CloseSession		<- close current session
	 :DeleteSession [name]	<- delete session from disk

2.34. SH	 				*config-sh*
						<url:../plugin/sh.vim>
Opens a terminal emulator.
Command: :Sh	<- open a terminal in the current working directory
	 :SH	<- open a terminal in the directory of the current file

2.35. Space	 				*config-space*
						<url:../plugin/space.vim>
Mappings for dealing with spaces.
Mapping: <leader>kt	<- kill trainling spaces (also in visual mode)
	 <leader>ki	<- kill inner spaces so that just one is left (also in visual mode)

2.36. |speeddating|				*config-speeddating*
Use <c-x> and <c-a> on other formats than decimal numbers, e.g. date and time.
Mapping: <c-a>	<- increase number under cursor
	 <c-x>	<- decrease number under cursor

2.37. |SudoEdit|				*config-SudoEdit*
Read (edit) or write files with sudo.
Command: :SudoEdit FILE		<- edit file with sudo
	 :SudoWrite [FILE]	<- wite file with sudo

2.38. |supertab|				*config-Supertab*
Do all your insert-mode completion with <Tab>.
Mapping: <Tab>	<- do insert mode completion

2.39. |surround|				*config-Surround*
Surround arbitrary text with other text ys|movement|<SURROUNDINGTEXT> or
s<SURROUNDINGTEXT> in visual mode.
Mapping: ys|movement|<SURROUNDINGTEXT>	<- surround movement in visual mode
	 with surrounding text. WARNING: ys is not repeatable via "." use cs
	 instead!
	 s<SURROUNDINGTEXT>	<- surround selected text in visual mode with
	 surrounding text
	 ds|movement|<SURROUNDINGTEXT>	<- deletes surrounding text
	 cs|movement|<SURROUNDINGTEXT>	<- change surrounding text. cs is
	 repeatable with "."

2.40. |taglist.txt|				*config-taglist*
Display tags in the currently opened files in a separate window.
Command: :Tlist

2.41. toggle					*config-toggle*
						<url:../bundle/Toggle/plugin/toggle.vim>
Toggle boolean values TRUE -> FALSE, off -> on ... and the sign for numbers
-1,+1
Mapping: <Esc>t

2.42. |txtfmt|					*config-txtfmt*
filetype=txtfmt or filetype=FILETYPE.txtfmt

format text in different colors:
- foreground (c) and background (k)

and formats (f + ) like
- italic (i), bold (b), underline (u), standard (s), reverse (r),
  undercurl (c)

Mapping: <leader>i + text-insert abbraviation	<- replace i with any other text movement
	 <C-\><C-\> <- insert mode mapping to define format sequences

2.43. |UltiSnips|				*config-UltiSnips*
Python implementation for expanding snippets. This plugin is very similar to
snipMate and other plugins.
Command: :py UltiSnips_Manager.reset()	<- Reload snippets
	 :UltiSnipsReset		<- Handy command for reloading snippets
Mapping: <Tab>				<- Expand the snippet before the cursor
	 <C-j>				<- Jump to next element during snippet expansion
	 <C-k>				<- Jump to previous element during snippet expansion
	 <C-Tab>			<- List available snippets

2.44. |utl|					*config-utl*
Universal text linking plugin.
Mapping: gl	<- follow link under cursor
	 gcc	<- copy the link under the cursor to clipboard

Examples:
<url:#r=here>	<- takes you to text "id=here"
<url:#tn=here> or <url:#tn=here>	<- jump to the first search occurrence of "here"
<url:#line=15>	<- takes you to line 15
<url:vimscript:COMMAND>	<- execute the vim command COMMAND

2.45. |vcscommand-contents|			*config-vcscommand*
General VCS integration
Commands:|:VCSAdd|	<- add the current file to VCS
	 |:VCSAnnotate|	<- display the file annotated with the version it was most
			 recently changed
	 |:VCSBlame|	<- alias |:VCSAnnotate|
	 |:VCSCommit|	<- commit changes in the file to VCS
	 |:VCSDelete|	<- delete the file from VCS
	 |:VCSDiff|	<- display difference to previous version
	 |:VCSGotoOriginal|	<- jump to original buffer if the current buffer
			 is a scratch buffer generated by other VCS commands
	 |:VCSLog|	<- display commit log information
	 |:VCSRemove|<- alias |:VCSAnnotate|
	 |:VCSRevert|	<- replace the file with the most recent version of VCS
	 |:VCSReview|	<- display a particular version from VCS in a new buffer
	 |:VCSStatus|	<- display VCS status information about a file
	 |:VCSUpdate|	<- retrieve the new version of file from the repository
	 |:VCSVimDiff|	<- use |vimdiff| to display diff

2.46. |vimcalc|					*config-vimcalc*
A handy calculator within vim.
Command: :Calc		<- open calculator

2.47. |visincr|					*config-VisIncr*
Produce increasing/decreasing columns of numbers, dates, or daynames.
Command: :I	<- run in |visual-block|-mode on a number of lines

2.48. Words 					*config-words*
						<url:../plugin/words.vim>
Mappings dealing with words.
Mapping: gsw	<- swap words
	 gsW	<- swap WORDS
	 gC	<- capitalize words (actually the movement)

2.49. |yankring|				*config-yankring*
Yankring which contains all cut or copied data.
Mapping: <F8>	<- show the yankring window
	 <ctrl-n> and <ctrl-p>	<- jump to the next/previous item in the ring
				 after paste command (p)

2.50. |zoomwin-usage|				*config-ZoomWin*
Add restore functionality to the |:only| command.
Mapping: <ctrl-w>o	<- press once to switch to only mode and a second time to
			restore the other windows

2.51. |vimoutliner|				*config-vimoutliner*
filetype=vo_base
Filetype extension: .otl

Outliner for vim. A text body belonging to a heading should always be indented
by one tabstop. E.g.

Heading (tabstop 0)
	: Text (tabstop 1)

	Heading 2 (tabstop 1)
	    : Text 2 (tabstop 2)


Text objects:
	 no marker	heading
	 :		body text (wrapping)
	 ;		preformatted body text (non-wrapping)
	 ||		table heading line
	 |		table
	 >		user-defined, text block (wrapping)
	 <		user-defined, preformatted text block (non-wrapping)

Mapping: ,,1	all 	set foldlevel=0
	 aso.
	 ,,0	all 	set foldlevel=99999
	 ,,-	all 	Draw dashed line
	 ,,f	normal	Directory listing of the current directory
	 ,,s	normal	Sort sub-tree under the cursor ascending
	 ,,S	normal	Sort sub-tree under the cursor descending
	 ,,t	normal	Append timestamp (HH:MM:SS) to heading
	 ,,T	normal	Pre-pend timestamp (HH:MM:SS) to heading
	 ,,t	insert	Insert timestamp (HH:MM:SS) at the cursor's position
	 ,,d	normal	Append datestamp  (YYYY-MM-DD) to heading
	 ,,d	insert	Insert datestamp  (YYYY-MM-DD) at the cursor's position
	 ,,D	normal	Pre-pend datestamp  (YYYY-MM-DD) to heading
	 ,,B	normal	Make body text start with a space
	 ,,b	normal	Make body text start with a colon and space
	 ,,w	insert	Save changes and return to insert mode
	 ,,e	normal	Execute the executable tag line under the cursor
	 		|vo-executable-lines|
	 ,,cb	normal	Insert a check box on the current line or each line of the
	 		currently selected range (including lines in selected but
	 		closed folds). This command is currently not aware of body
	 		text. Automatic recalculation of is performed for the entire
	 		root-parent branch that contains the updated child.  (see
	 		,,cz)
	 ,,cx	normal	Toggle check box state (percentage aware)
	 ,,cd	normal	Delete check boxes
	 ,,c%	normal	Create a check box with percentage placeholder except on
	 		childless parents
	 ,,cp	normal	Create a check box with percentage placeholder on all headings
	 ,,cz	normal	Compute completion for the tree below the current heading.

Post processors: A number of post processors exists |vo-post-processors| but
none of these is working well for me.

FILETYPE PLUGINS				*config-ftplugin*

3.1. javascript					*config-javascript*
						<url:../bundle/Javascript_Indentation/indent/javascript.vim>
JavaScript indentation plugin.

3.3. pep8					*config-pep8*
						<url:../bundle/pep83160/ftplugin/python_pep8.vim>
Plugin for running a PEP8 validation on Python files.
Mapping: <F6>	<- validate current file

3.3. |xml-plugin.txt|				*config-xml*
Plugin for xml.
Mapping: <LocalLeader>[	<- delete the <![CDATA[ ]]> delimiters
	 <LocalLeader>{	<- delete the <![CDATA[ ]]> section
	 <LocalLeader>]	<- delete the <!-- -->  delimiters
	 <LocalLeader>}	<- delete the <!-- -->  section
	 	    [[	<- goto to the previous open tag
	 	    [[	<- goto to the next open tag
	 	    []	<- goto to the previous close tag
	 	    ][	<- goto to the next  close tag
	 	    ["	<- goto to the next  comment
	 	    ]"	<- goto the previous comment
	 <LocalLeader>5	<- jump to the matching tag.
	 <LocalLeader>%	<- jump to the matching tag.
	 <LocalLeader>c	<- rename tag
	 <LocalLeader>C	<- rename tag and remove attributes
	 <LocalLeader>d	<- deletes the surrounding tags from the cursor.
	 <LocalLeader>D	<- deletes the tag and it contents
	 <LocalLeader>e	<- provide endtag for open tags.
	 <LocalLeader>f	<- fold the tag under the cursor
	 <LocalLeader>F	<- all tags of name 'tag' will be fold.
	 <LocalLeader>g	<- format (Vim's gq function)
	 <LocalLeader>G	<- format all tags under cursor (Vim's gq function)
	 <LocalLeader>I	<- indent all tags
	 <LocalLeader>j	<- joins two of the SAME sections
	 <LocalLeader>l	<- visual surround the block with listitem and para
	 <LocalLeader>o	<- insert a tag inside the current one (like vim o)
	 <LocalLeader>O	<- insert a tag outside the current one (like vim O)
	 <LocalLeader>s	<- insert an opening tag for an closing tag.
	 <LocalLeader>[	<- delete the <![CDATA[ ]]> delimiters
	 <LocalLeader>{	<- delete the <![CDATA[ ]]> section
	 <LocalLeader>]	<- delete the <!-- --> delimiters
	 <LocalLeader>}	<- delete the <!--  --> section
	 <LocalLeader>>	<- shift right opening tag and closing tag.
	 <LocalLeader><	<- shift left opening tag and closing tag.
	 <LocalLeader>c	<- visual Place a CDATA section around the selected text.
	 <LocalLeader><	<- visual Place a Comment around the selected text.
	 <LocalLeader>5	<- extend the visual selection to the matching tag.
	 <LocalLeader>%	<- extend the visual selection to the matching tag.
	 <LocalLeader>v	<- visual Place a tag around the selected text.

COLORSCHEMES					*config-colorscheme*

4.1. peaksea					*config-peaksea*
						<url:../colors/peaksea.vim>
Best colorscheme ever! In this configuration the light background version is
used.

SYNTAX						*config-syntax*

5.1. asciidoc					*config-asciidoc*
						<url:../syntax/asciidoc.vim>
Asciidoc syntax highlighting.

5.2. json					*config-json*
						<url:../bundle/JSON/syntax/json.vim>

5.3. markdown					*config-markdown*
						<url:../syntax/markdown.vim>
Markdown syntax highlighting.

5.3. |txtbrowser|				*config-txtbrowser*
Text file syntax highlighting in addition with a |taglist.txt| extension to
make text files browsable. It also contains a plugin which I disabled
(<url:../../.vimrc#txtbrowser_disabled>) for it doesn't seem to add anything
to my workflow.

vi: ft=help:tw=78:sw=8:ts=8:noet
