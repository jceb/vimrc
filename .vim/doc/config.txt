*config.txt*      Description of configuration and plugins of this vim config.

	                by Jan Christoph Ebersbach

==============================================================================

                             Contents                               *config*

1. General Information				|config-information|
1. Plugins					|config-plugin|
    2.1.  Align					|config-align|
    2.2.  Bc					|config-bc|
    2.3.  Cd					|config-cd|
    2.4.  Cdargs				|config-cdargs|
    2.5.  delimitMate				|config-delimitMate|
    2.6.  Diff2qf				|config-Diff2qf|
    2.7.  Editqf				|config-Editqf|
    2.8.  Fastwordcompleter			|config-Fastwordcompleter|
    2.9.  Find					|config-Find|
    2.10. FuzzyFinder				|config-FuzzyFinder|
    2.11. gnupg					|config-gnupg|
    2.12. Highlight_pmt				|config-highlight_pmt|
    2.13. IndentAnything			|config-IndentAnything|
    2.14. LastMod				|config-lastmod|
    2.15. LaTeX Tool Box			|config-latex-box|
    2.16. mark					|config-mark|
    2.17. math					|config-math|
    2.18. multiedit				|config-multiedit|
    2.19. NERDCommenter				|config-NERDCommenter|
    2.20. NERDTree				|config-NERDTree|
    2.21. Patches				|config-patches|
    2.22. Pydoc					|config-Pydoc|
    2.23. pythonhelper				|config-pythonhelper|
    2.24. qfn					|config-qfn|
    2.25. ragtag				|config-ragtag|
    2.26. repeat				|config-repeat|
    2.27. RFC					|config-rfc|
    2.28. Save					|config-save|
    2.29. Session				|config-session|
    2.30. Sessions				|config-sessions|
    2.31. SH					|config-sh|
    2.32. showmarks				|config-showmarks|
    2.33. snipMate				|config-snipMate|
    2.34. Space					|config-space|
    2.35. speeddating				|config-speeddating|
    2.36. SudoEdit				|config-SudoEdit|
    2.37. Supertab				|config-Supertab|
    2.38. Surround				|config-Surround|
    2.39. taglist				|config-taglist|
    2.40. toggle				|config-toggle|
    2.41. txtfmt				|config-txtfmt|
    2.42. utl					|config-utl|
    2.43. vcscommand				|config-vcscommand|
    2.44. VisIncr				|config-VisIncr|
    2.45. Words					|config-words|
    2.46. yankring				|config-yankring|
    2.47. ZoomWin				|config-ZoomWin|
    2.48. vimoutliner				|config-vimoutliner|
3. Filetype Plugins				|config-ftplugin|
    3.1. javascript				|config-javascript|
    3.2. xml					|config-xml|
4. Colorschemes					|config-colorscheme|
    4.1. peaksea				|config-peaksea|
5. Syntax					|config-syntax|
    5.1. asciidoc				|config-asciidoc|
    5.2. bbcode					|config-bbcode|
    5.3. markdown				|config-markdown|
    5.4. txtbrowser				|config-txtbrowser|

==============================================================================

GENERAL INFORMATION				*config-information*

Hello and welcome to my vim configuration. I hope this document will help you
find your way through it. My configuration is under constant improvement. I
try to keep up with the changes at vim.org and always have an eye on the
plugin section to find even better plugins.

Why do I do all this? - Once I figured out the Lisp and Emacs is not my of
editing files and found vim, I decided to stick with it. In fact vim came
extremely easy and just the way I never dared to dream about text editing! -
Want to see what I'm talking about? Have a look at this presentation:
http://vimcasts.org/episodes/modal-editing-undo-redo-and-repeat/

What's next? - My workflow:
I have to admit that a plain vim is sufficient in most situations on remote
systems but for serious editing tasks it's not suite perfectly. The following
things I missed most:

- easy to use file and directory navigation
- fast restoration of a former work environment
- an effective and visually attractive default configuration
- support when editing text by word suggestions and snippets
- little helper tools for various tasks

Fortunately vim provides all this with its plugin system.

TODO: To be continued

In some cases the default vim behavior didn't really fit my needs so I
changed. To not be surprised you should have a look at
<url:~/.vimrc#r=Changes to the default behavior>.

General key binding are found in the section <url:~/.vimrc#r=Keymappings> and
key bindings related to plugin in section |config-plugin|.

Other than that it's highly important to me to provide you a way to include
your own settings without messing them up the upstream with the upstream
changes. At the end of my .vimrc file personal.vim is sourced which may
contain your settings (<url:~/.vimrc#r=Personal settings>). Here is an example
for personal.vim:

				*config-personal* *config-personal.vim*
	" EmailAddress query program
	let g:emailAddrQueryProg = "~/bin/vcardquery.py --email="

	" Personal settings
	let g:userName      = "Your Surname"
	let g:userGivenName = "Your given name"
	let g:snips_author  = g:userGivenName.' '.g:userName
	let g:userStreet    = "Your street"
	let g:userCity      = "Your city"
	let g:userZip       = "Your zip"
	let g:userAddr      = g:userStreet."\n".g:userZip.' '.g:userCity
	let g:userPhone     = "Tel:.  : Your phone\nMobile : Your mobile"
	let g:userEmail     = "Your e-mail"
	let g:userWWW       = "http://www.example.com/"

PLUGINS						*config-plugin*

A number of plugins are shipped with this vim configuration. The following
sections contain a brief overview with useful hints for using them. In
addition links to help files and plugins are completing the overview.

All plugins can be updated automatically via :GetLatestVimScripts. Have a look
<url:../GetLatest/GetLatestVimScripts.dat>.

2.1. |Align| 					*config-align*
Align text in arbitrary ways.
Command: :Align	<STRING>	<- align viually selected text at string

2.2. Bc						*config-bc*
						<url:../plugin/bc.vim>
Adds support for bc calculator.
Command: :Bc <computation>	<- compute computation with Bc

2.3. Cd						*config-cd*
						<url:../plugin/cd.vim>
Several commands dealing with directory changes.
Command: :Cd		<- change working directory to the file currently edited
	 :Lcd		<- like :Cd but only locally
	 :Cddeb		<- within a debian package, change to the root directory
	 :PathAdd	<- add directory of edited file to path
	 :PathRem	<- remove directory of edited file from path
	 :PathAdddeb	<- add debian root directory to path
	 :PathRemdeb	<- remove debian root directory to path

2.4. cdargs					*config-cdargs*
						<url:../plugin/cdargs.vim>
Integrates cdargs plugin for fast directory changes.
Command: :Cdb <bookmark>	<- change working directory to bookmark
	 :Ca <bookmark>		<- add bookmark to working directory

2.5. |delimitMate|				*config-delimitMate*
Autoclose (), [], {} when opened and leave the braces with pressing ), ], }

2.6. |diff2qf|					*config-Diff2qf*
Load a patch file into quickfix list to make it easily accessible.
Command: :Diff2qf <file>	<- load patch into qf (replace current qf)
	 :Diff2qfAppend <file>	<- load patch into qf (append to current qf)

2.7. |editqf|					*config-Editqf*
Make quickfix list editable.
Command: Write	<- any command executed in the editable qf list will close the
		window and reload the changed list into qf
	 Leave	<- any command that causes the cursor to leave the editable qf
		list will close the window and discard all changes
Mapping: i	<- i pressed in qf window opens qf list in another window

2.8. |fastwordcompleter|			*config-Fastwordcompleter*
Obsoleted by |config-neocomplcache|!
Supports writing by providing autocompletion for words.
Command: :FastWordCompletionStart	<- start word completion
	 :FastWordCompletionStop	<- stop word completion

2.9. Find					*config-Find*
						<url:../plugin/find.vim>
Integrate UNIX find command preconfigured for finding files, also in SCM
polluted directories.
Command: :Find <term>	<- find term and open files in quickfix window
	 :FFind <term>	<- case sensitive find

2.10. |fuzzyfinder|				*config-FuzzyFinder*
Open files from a completion list. FuzzyFinder has been abandonded in favour
of LustyExplorer.
Mapping: <leader>ff	<- open file completion in CWD
	 <leader>FF	<- open file completion in the directory of the current
		 file
	 <leader>fd	<- change current working directory (CWD)
	 <leader>fh	<- open vim help tags

2.11. gnupg 					*config-gnupg*
						<url:../plugin/gnupg.vim>
Adds GnuPG support to vim. Just open encrypted files and edit them like normal
after entering the passphrase.

2.12. Highlight_pmt 				*config-highlight_pmt*
						<url:../plugin/Highlight_pmt.vim>
Passive plugin that highlights print margin and trailing spaces.

2.13. |IndentAnything| 				*config-IndentAnything*
Library to make writing indentation scripts easier.

2.14. |LastMod| 				*config-lastmod*
						<url:../plugin/lastmod.vim>
Passive plugin that updates lines containing the string "Last Modified:" with
the current date and time.

2.15. |latex-box|				*config-latex-box*
Simple tool box for LaTeX. It provides mainly in-text completion via
<c-x><c-o> and several command for compiling LaTeX documents. Make sure you
install the "latexmk" program to be able to compile latex documents.
Mapping: <leader>ll	<- compile current file
	 <leader>lc	<- clean temporary compilation files
	 <leader>lv	<- display output pdf file by xpdf or other
			 viewer |g:LatexBox_viewer|

2.16. |mark.vim|				*config-mark*
Highlight multiple search terms.
Mapping: <leader>m	<- add word under cursor to highlighting

2.17. math					*config-math*
						<url:../plugin/math.vim>
Some mathematical functions.

2.18. multiedit					*config-multiedit*
						<url:../plugin/multiedit.vim>
Edit multiple files with the well known commands.
Command: :E	<- edit multiple files
	 :Sp	<- edit multiple files in split windows
	 :Vs	<- edit multiple files in vertically split windows

2.19. |NERDCommenterContents|			*config-NERDCommenter*
Un-/comment lines.
Mapping: <leader><space>	<- toggle comment

2.20. |NERDTree-contents|			*config-NERDTree*
A file system explorer.
Command: :NERDTree	<- show NERDTree explorer
Mapping: <leader>e	<- toogle NERDTree explorer

2.21. Patches 					*config-patches*
						<url:../plugin/patches.vim>
Collection of commands dealing with failed patches.
Command: :Reject	<- open reject file (.rej)
	 :Orginal	<- open original file (.orig)
	 :Mine		<- open my file (.mine)
	 :Source	<- open source file

2.22. Pydoc 					*config-Pydoc*
						<url:../plugin/pydoc.vim>
Adds funktionality to display python documentation in vim.
Command: :Pydoc TERM	<- open python documentation for term
Mapping: <leader>pw	<- open python documentation for word under cursor
	 <leader>Pw	<- open python documentation for WORD under cursor

2.23. pythonhelper 				*config-pythonhelper*
						<url:../plugin/pythonhelper.vim>
Helps moving around in Python files with displaying the current function and
class in the status bar.

2.24. |qfn.txt|					*config-qfn*
Create notes in an error list with <leader>n, open the error list with :copen
and jump to the items later on. With :QFNSave the errorlist can be saved to a
file.
Command: :QFNSave FILENAME	<- save errorlist to file
Mapping: <leader>n	<- add note to errorlist

2.25. |ragtag| 					*config-ragtag*
Mappings to help editing XML/HTML based file types.
Mapping: <C-X>=	<- foo<%= ^ %>
	 <C-X>+	<- <%= foo^ %>
	 <C-X>-	<- foo<% ^ %>
	 <C-X>_	<- <% foo^ %>
	 <C-X>'	<- foo<%# ^ %> (mnemonic: ' is a comment in ASP VBS)
	 <C-X>"	<- <%# foo^ %>
	 <C-X><Space>	<- <foo>^</foo>
	 <C-X><CR>	<- <foo>\n^\n</foo>
	 <C-X>/	<- Last HTML tag closed
	 <C-X>!	<- <!DOCTYPE...>/<?xml ...?>
	 <C-X>@	<- <link rel="stylesheet" ...>
	 <C-X>#	<- <meta http-equiv="Content-Type" ... />
	 <C-X>$	<- <script src="/javascripts/^.js"></script>

2.26. repeat 					*config-repeat*
						<url:../plugin/repeat.vim>
Repeat last surround or speeddating command with normal "." mapping.
Mapping: .	<- repeat last surround command

2.27. RFC 					*config-rfc*
						<url:../plugin/rfc.vim>
Easily open RFCs within vim.
Command: :RFC <rfcnumber>	<- open RFC

2.28. Save 					*config-save*
						<url:../plugin/save.vim>
Save file under different name and delete old file.
Command: :Save	<filename>	<- Save under filename
	 :Sav <filename>	<- alias for :Save

2.29. |session.txt| 				*config-session*
Plugin to deal with vim sessions. This plugin will succeed my quick hack
|config-sessions| which at the moment still works better and provides also
quickfix save and restore.
Command: :SaveSession [name]	<- save vim session under an optional name
	 :OpenSession [name]	<- restore session
	 :CloseSession		<- close current session
	 :DeleteSession [name]	<- delete session from disk

2.30. Sessions	 				*config-sessions*
						<url:../plugin/sessions.vim>
Mappings for dealing with vim sessions and quickfix data aiming at restoring
the work environment as fast as possible.
Mapping: <leader>sc	<- create vim session
	 <leader>sl	<- load vim session
	 <leader>sd	<- delete vim session
	 <leader>qc	<- create quickfix session
	 <leader>ql	<- load quickfix session
	 <leader>qd	<- delete quickfix session

2.31. SH	 				*config-sh*
						<url:../plugin/sh.vim>
Open x terminal emulator.
Command: :Sh	<- open terminal in current working directory
	 :SH	<- open terminal in the directory of the current file

2.32. |showmarks| 				*config-showmarks*
Displays defined marks at the right hand side of the window so that you can
easily jump to them.
Mapping: <leader>mt	<- toggle ShowMarks column

2.33. |snipMate|				*config-snipMate*
Create text snippets which can be expanded with <Tab> key. Have a look at
~/.vim/snippets/*.snippets.
Mapping: <Tab><- expand snippet before cursor or jump to next jump point

2.34. Space	 				*config-space*
						<url:../plugin/space.vim>
Mappings for dealing with spaces.
Mapping: <leader>kt	<- kill trainling spaces (also in visual mode)
	 <leader>ki	<- kill inner spaces so that just one is left (also in visual mode)

2.35. |speeddating|				*config-speeddating*
Use <c-x> and <c-a> on other formats than decimal numbers, e.g. date and time.
Mapping: <c-a>	<- increase number under cursor
	 <c-x>	<- decrease number under cursor

2.36. |SudoEdit|				*config-SudoEdit*
Read (edit) or write files with sudo.
Command: :SudoEdit FILE		<- edit file with sudo
	 :SudoWrite [FILE]	<- wite file with sudo

2.37. |supertab|				*config-Supertab*
Do all your insert-mode completion with <Tab>.
Mapping: <Tab>	<- do insert mode completion

2.38. |surround|				*config-Surround*
Surround arbitrary text with other text ys|movement|<SURROUNDINGTEXT> or
s<SURROUNDINGTEXT> in visual mode.
Mapping: ys|movement|<SURROUNDINGTEXT>	<- surround movement in visual mode
	 with surrounding text. WARNING: ys is not repeatable via "." use cs
	 instead!
	 s<SURROUNDINGTEXT>	<- surround selected text in visual mode with
	 surrounding text
	 ds|movement|<SURROUNDINGTEXT>	<- deletes surrounding text
	 cs|movement|<SURROUNDINGTEXT>	<- change surrounding text. cs is
	 repeatable with "."

2.39. |taglist.txt|				*config-taglist*
Display tags in currently opened files in a separate window.
Command: :Tlist

2.40. toggle					*config-toggle*
						<url:../plugin/toggle.vim>
Toggle boolean values TRUE -> FALSE, off -> on ... and the sign for numbers
-1,+1
Mapping: <Esc>t

2.41. |txtfmt|					*config-txtfmt*
filetype=txtfmt or filetype=FILETYPE.txtfmt

formatting text in vim with colors:
- foreground (c) and background (k)

and formats (f + ) like
- italic (i), bold (b), underline (u), standard (s), reverse (r),
  undercurl (c)

Mapping: <leader>i + text-insert abbraviation	<- replace i with any other text movement
	 <C-\><C-\> <- insert mode mapping to define format sequences

2.42. |utl|					*config-utl*
Universal text linking plugin.
Mapping: gl	<- follow link under cursor
	 gcc	<- copy link under cursor to clipboard

Examples:
<url:#r=here>	<- takes you to text "id=here"
<url:#tn=here> or <url:#tn=here>	<- jump to the first search occurrence of "here"
<url:#line=15>	<- takes you to line 15
<url:vimscript:COMMAND>	<- execute vim command COMMAND

2.43. |vcscommand-contents|			*config-vcscommand*
General VCS integration
Commands:|:VCSAdd|	<- add currenfile to VCS
	 |:VCSAnnotate|	<- display file annotated with the version it was most
			 recently changed
	 |:VCSBlame|	<- alias |:VCSAnnotate|
	 |:VCSCommit|	<- commit changes in file to VCS
	 |:VCSDelete|	<- delete file from VCS
	 |:VCSDiff|	<- display difference to previous version
	 |:VCSGotoOriginal|	<- jump to original buffer if the current buffer
			 is a scratch buffer generated by other VCS commands
	 |:VCSLog|	<- display commit log information
	 |:VCSRemove|<- alias |:VCSAnnotate|
	 |:VCSRevert|	<- replace file with most recent version of VCS
	 |:VCSReview|	<- display a particular version from VCS in a new buffer
	 |:VCSStatus|	<- display VCS status information about a file
	 |:VCSUpdate|	<- retrieve new version of file from the repository
	 |:VCSVimDiff|	<- use |vimdiff| to display diff

2.44. |visincr|					*config-VisIncr*
Produce increasing/decreasing columns of numbers, dates, or daynames.
Command: :I	<- run in |visual-block|-mode on a number of lines

2.45. Words 					*config-words*
						<url:../plugin/words.vim>
Mappings dealing with words.
Mapping: gsw	<- swap words
	 gsW	<- swap WORDS
	 gC	<- capitalize words (actually the movement)

2.46. |yankring|				*config-yankring*
Yankring which contains all cut or copied data.
Mapping: <F8>	<- show the yankring window
	 <ctrl-n> and <ctrl-p>	<- jump to the next/previous item in the ring
				 after paste command (p)

2.47. |zoomwin-usage|				*config-ZoomWin*
Add restore functionality to the |:only| command.
Mapping: <ctrl-w>o	<- press once to switch to only mode and a second time to
			restore the other windows

2.48. |vimoutliner|				*config-vimoutliner*
filetype=vo_base
Filetype extension: .otl

Outliner for vim. A text body belonging to a heading should always be indented
by one tabstop. E.g.

Heading (tabstop 0)
	: Text (tabstop 1)

	Heading 2 (tabstop 1)
	    : Text 2 (tabstop 2)


Text objects:
	 no marker	heading
	 :		body text (wrapping)
	 ;		preformatted body text (non-wrapping)
	 ||		table heading line
	 |		table
	 >		user-defined, text block (wrapping)
	 <		user-defined, preformatted text block (non-wrapping)

Mapping: ,,1	all 	set foldlevel=0
	 aso.
	 ,,0	all 	set foldlevel=99999
	 ,,-	all 	Draw dashed line
	 ,,f	normal	Directory listing of the current directory
	 ,,s	normal	Sort sub-tree under cursor ascending
	 ,,S	normal	Sort sub-tree under cursor descending
	 ,,t	normal	Append timestamp (HH:MM:SS) to heading
	 ,,T	normal	Pre-pend timestamp (HH:MM:SS) to heading
	 ,,t	insert	Insert timestamp (HH:MM:SS) at cursor
	 ,,d	normal	Append datestamp  (YYYY-MM-DD) to heading
	 ,,d	insert	Insert datestamp  (YYYY-MM-DD) at cursor
	 ,,D	normal	Pre-pend datestamp  (YYYY-MM-DD) to heading
	 ,,B	normal	Make body text start with a space
	 ,,b	normal	Make body text start with a colon and space
	 ,,w	insert	Save changes and return to insert mode
	 ,,e	normal	Execute the executable tag line under cursor
	 		|vo-executable-lines|
	 ,,cb	normal	Insert a check box on the current line or each line of the
	 		currently selected range (including lines in selected but
	 		closed folds). This command is currently not aware of body
	 		text. Automatic recalculation of is performed for the entire
	 		root-parent branch that contains the updated child.  (see
	 		,,cz)
	 ,,cx	normal	Toggle check box state (percentage aware)
	 ,,cd	normal	Delete check boxes
	 ,,c%	normal	Create a check box with percentage placeholder except on
	 		childless parents
	 ,,cp	normal	Create a check box with percentage placeholder on all headings
	 ,,cz	normal	Compute completion for the tree below the current heading.

Post processors: A number of post processors exists |vo-post-processors| but
none of these is working well for me.

FILETYPE PLUGINS				*config-ftplugin*

3.1. javascript					*config-javascript*
						<url:../indent/javascript.vim>
JavaScript indentation plugin.

3.2. |xml-plugin.txt|				*config-xml*
Plugin for xml.
Mapping: <LocalLeader>[	<- delete <![CDATA[ ]]> delimiters
	 <LocalLeader>{	<- delete <![CDATA[ ]]> section
	 <LocalLeader>]	<- delete <!-- -->  delimiters
	 <LocalLeader>}	<- delete <!-- -->  section
	 	    [[	<- goto to the previous open tag
	 	    [[	<- goto to the next open tag
	 	    []	<- goto to the previous close tag
	 	    ][	<- goto to the next  close tag
	 	    ["	<- goto to the next  comment
	 	    ]"	<- goto the previous comment
	 <LocalLeader>5	<- jump to the matching tag.
	 <LocalLeader>%	<- jump to the matching tag.
	 <LocalLeader>c	<- rename tag
	 <LocalLeader>C	<- rename tag and remove attributes
	 <LocalLeader>d	<- deletes the surrounding tags from the cursor.
	 <LocalLeader>D	<- deletes the tag and it contents
	 <LocalLeader>e	<- provide endtag for open tags.
	 <LocalLeader>f	<- fold the tag under the cursor
	 <LocalLeader>F	<- all tags of name 'tag' will be fold.
	 <LocalLeader>g	<- format (Vim's gq function)
	 <LocalLeader>G	<- format all tags under cursor (Vim's gq function)
	 <LocalLeader>I	<- indent all tags
	 <LocalLeader>j	<- joins two the SAME sections together.
	 <LocalLeader>l	<- visual surround the block with listitem and para
	 <LocalLeader>o	<- insert a tag inside the current one (like vim o)
	 <LocalLeader>O	<- insert a tag outside the current one (like vim O)
	 <LocalLeader>s	<- insert an opening tag for an closing tag.
	 <LocalLeader>[	<- delete <![CDATA[ ]]> delimiters
	 <LocalLeader>{	<- delete <![CDATA[ ]]> section
	 <LocalLeader>]	<- delete <!-- --> delimiters
	 <LocalLeader>}	<- delete <!--  --> section
	 <LocalLeader>>	<- shift right opening tag and closing tag.
	 <LocalLeader><	<- shift left opening tag and closing tag.
	 <LocalLeader>c	<- visual Place a CDATA section around the selected text.
	 <LocalLeader><	<- visual Place a Comment around the selected text.
	 <LocalLeader>5	<- extend the visual selection to the matching tag.
	 <LocalLeader>%	<- extend the visual selection to the matching tag.
	 <LocalLeader>v	<- visual Place a tag around the selected text.

COLORSCHEMES					*config-colorscheme*

4.1. peaksea					*config-peaksea*
						<url:../colors/peaksea.vim>
Best colorscheme ever! In this configuration the light background version is
used.

SYNTAX						*config-syntax*

5.1. asciidoc					*config-asciidoc*
						<url:../syntax/asciidoc.vim>
Asciidoc syntax highlighting.

5.2. bbcode					*config-bbcode*
						<url:../syntax/bbcode.vim>
Bbcode syntax highlighting.

5.3. markdown					*config-markdown*
						<url:../syntax/markdown.vim>
Markdown syntax highlighting.

5.4. |txtbrowser|				*config-txtbrowser*
Text file syntax highlighting in addition with a |taglist.txt| extension to
make text files browsable. It also contains a plugin which I disabled
(<url:../../.vimrc#txtbrowser_disabled>) for it doesn't seem to add anything
to my workflow.

vi: ft=help:tw=78:sw=8:ts=8:noet
