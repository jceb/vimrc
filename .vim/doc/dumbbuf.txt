*dumbbuf.txt* *dumbbuf*

Author: tyru <tyru.exe@gmail.com>
Version: 0.0.9
License:
" NEW BSD LICENSE {{{
"   Copyright (c) 2009, tyru
"   All rights reserved.
"
"   Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
"
"       * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
"       * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
"       * Neither the name of the tyru nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.
"
"   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
" }}}

==============================================================================
CONTENT						*dumbbuf-contents*

Introduction				|dumbbuf-introduction|
Interface					|dumbbuf-interface|
  Keymappings				|dumbbuf-keymappings|
  Variables					|dumbbuf-variables|
My .vimrc					|dumbbuf-my-vimrc|
TODO						|dumbbuf-todo|
Changelog					|dumbbuf-changelog|


==============================================================================
Introduction				*dumbbuf-introduction* {{{

DumbBuf is flexible buffer manager like QuickBuf.vim.

}}}
==============================================================================
Interface				*dumbbuf-interface* {{{
------------------------------------------------------------------------------
Keymappings					*dumbbuf-keymappings* {{{

please define g:dumbbuf_hotkey at first.
if that is not defined, this script is not loaded.

Visual Mode:
    x				*dumbbuf-visual-x*
        mark buffers on selected region.
        see Normal Mode's xx for details.

Normal Mode:
    q				*dumbbuf-normal-q*
        :close dumbbuf buffer.
    |g:dumbbuf_hotkey|
        toggle dumbbuf buffer.
    <CR>				*dumbbuf-normal-enter* *dumbbuf-normal-cr*
        :edit buffer.
    u				*dumbbuf-normal-u*
       open one by one. this is same as QuickBuf's u.
    o				*dumbbuf-normal-o*
       :sbuffer buffer.
    s				*dumbbuf-normal-s*
       :split buffer.
    v				*dumbbuf-normal-v*
       :vspilt buffer.
    t				*dumbbuf-normal-t*
       :tabedit buffer.
    d				*dumbbuf-normal-d*
       :bdelete buffer.
    w				*dumbbuf-normal-w*
       :bwipeout buffer.
    l				*dumbbuf-normal-l*
       toggle listed buffers or unlisted buffers.
    c				*dumbbuf-normal-c*
       :close buffer.
    x				*dumbbuf-normal-x*
        mark buffer.
        if one or more marked buffers exist,
        's', 'v', 't', 'd', 'w', 'c'
        get to be able to execute for that buffers at a time.

and, if you turn on |g:dumbbuf_single_key|,
you can use single key mappings like QuickBuf.vim.
see 'g:dumbbuf_single_key' at 'Global Variables' for details.

}}}
------------------------------------------------------------------------------
Variables					*dumbbuf-variables* {{{

g:dumbbuf_hotkey						*g:dumbbuf_hotkey*
										(default: no default value)
    a mapping which calls dumbbuf buffer.
    if this variable is not defined, this plugin will be not loaded.

g:dumbbuf_open_with						*g:dumbbuf_open_with*
										(default: "botright")
    open dumbbuf buffer with this command.

g:dumbbuf_vertical						*g:dumbbuf_vertical*
										(default: 0)
    if true, open dumbbuf buffer vertically.

g:dumbbuf_buffer_height					*g:dumbbuf_buffer_height*
										(default: 10)
    dumbbuf buffer's height.
    this is used when only g:dumbbuf_vertical is false.

g:dumbbuf_buffer_width					*g:dumbbuf_buffer_width*
										(default: 25)
    dumbbuf buffer's width.
    this is used when only g:dumbbuf_vertical is true.

g:dumbbuf_listed_buffer_name					*g:dumbbuf_listed_buffer_name*
										(default: "__buffers__")
    dumbbuf buffer's filename.
    set this filename when showing "listed buffers".
    "listed buffers" are opposite of "unlisted-buffers".
    see |unlisted-buffer|.

    NOTE: DON'T assign string which includes whitespace, or any special
    characters like "*", "?", ",".
    see :help file-pattern

g:dumbbuf_unlisted_buffer_name					*g:dumbbuf_unlisted_buffer_name*
										(default: "__unlisted_buffers__")
    dumbbuf buffer's filename.
    set this filename when showing "unlisted buffers".

    NOTE: DON'T assign string which includes whitespace, or any special
    characters like "*", "?", ",".
    see :help file-pattern

g:dumbbuf_cursor_pos					*g:dumbbuf_cursor_pos*
										(default: "current")
    jumps to this position when dumbbuf buffer opens.
    this is useful for deleting some buffers continuaslly.

    "current":
        jump to the current buffer's line.
    "keep":
        keep the cursor pos.
    "top":
        always jump to the top line.
    "bottom":
        always jump to the bottom line

g:dumbbuf_shown_type					*g:dumbbuf_shown_type*
										(default: '')
    show this type of buffers list.

    '':
        if current buffer is unlisted, show unlisted buffers list.
        if current buffer is listed, show listed buffers list.
    "unlisted":
        show always unlisted buffers list.
    "listed":
        show always listed buffers list.
    "project":
        show buffers each project.

g:dumbbuf_close_when_exec					*g:dumbbuf_close_when_exec*
										(default: 0)
    if true, close when execute local mapping from dumbbuf buffer.

g:dumbbuf_remove_marked_when_close					*g:dumbbuf_remove_marked_when_close*
										(default: 0)
    remove all marked buffers on closing dumbbuf buffer.
    this default value is for only backward compatibility.
    (if I could fix this variable name...
     "dumbbuf_close_when_exec" => "dumbbuf_close_on_exec")

g:dumbbuf_downward					*g:dumbbuf_downward*
										(default: 1)
    if true, go downwardly when "u" mapping.
    if false, go upwardly.

g:dumbbuf_hl_cursorline					*g:dumbbuf_hl_cursorline*
										(default: "guibg=Red  guifg=White")
    local value of highlight "CursorLine" in dumbbuf buffer.

g:dumbbuf_wrap_cursor					*g:dumbbuf_wrap_cursor*
										(default: 1)
    wrap the cursor at the top or bottom of dumbbuf buffer.

g:dumbbuf_all_shown_types					*g:dumbbuf_all_shown_types*
										(default: ["listed", "unlisted", "project"])
    all available shown types.

g:dumbbuf_timeoutlen					*g:dumbbuf_timeoutlen*
										(default: 0)
    local value of &timeoutlen in dumbbuf buffer.


For The Experienced User: {{{
    g:dumbbuf_disp_expr					*g:dumbbuf_disp_expr*
											(default: see plugin/dumbbuf.vim)
        this variable is for the experienced users.

        "v:val" has buffer's info.
        NOTE: "val" does NOT work now.

    g:dumbbuf_options					*g:dumbbuf_options*
											(default: see plugin/dumbbuf.vim)
        this variable is for the experienced users.
        dumbbuf buffer will be set up with these options.

    g:dumbbuf_mappings					*g:dumbbuf_mappings*
											(default: see plugin/dumbbuf.vim)
        this variable is for the experienced users.
        these settings will override default value.

        if your .vimrc setting is

          let g:dumbbuf_mappings = {
              \"n": {
                  \"<Esc>": {"alias_to": "q"}
              \}
          \}

        you can type <Esc> to close dumbbuf buffer.
        no influences for other default mappings.

        and there are some special keys:
            "alias_to": "map"
                make an alias for "map".
            "swap_with": "map"
                swap mapping with "map".
}}}

}}}
}}}
==============================================================================
My .vimrc					*dumbbuf-my-vimrc* {{{


	let dumbbuf_hotkey = "<Leader>b"
	" sometimes I put <Esc> to close dumbbuf buffer,
	" which was mapped to close QuickBuf :)
	let dumbbuf_mappings = {
	    \"n": {
	        \"<Esc>": {"alias_to": "q"},
	    \}
	\}
	
	let dumbbuf_wrap_cursor = 0
	let dumbbuf_remove_marked_when_close = 1

}}}
==============================================================================
TODO						*dumbbuf-todo* {{{

- manipulate buffers each project.
- each keymap behaves like operator
- :hide
- option which decides the order of buffer's list.
- support <Plug>... mapping as hotkey.
- ask if dumbbuf might execute mapping when current buffer has changed.
- labeling the files under the current directory or not.
  (shown type is "directory")
  - same UI as shown type "project". so implement "project" at first.

}}}
==============================================================================
Changelog						*dumbbuf-changelog* {{{

0.0.0:
    Initial upload
0.0.1:
    implement g:dumbbuf_cursor_pos, g:dumbbuf_shown_type, and "tt"
    mapping.
    and fix bug of showing listed buffers even if current buffer is
    unlisted.
0.0.2:
    - fix bug of destroying " register...
    - implement g:dumbbuf_close_when_exec, g:dumbbuf_downward.
    - use plain j and k even if user mapped j to gj and/or k to gk.
    - change default behavior.
      if you want to close dumbbuf buffer on each mapping
      as previous version, let g:dumbbuf_close_when_exec = 1.
      (but "<CR>" mapping is exceptional case.
      close dumbbuf buffer even if g:dumbbuf_close_when_exec is false)
    - support of glvs.
0.0.3:
    - fix bug of trapping all errors(including other plugin error).
0.0.4:
    - implement single key mappings like QuickBuf.vim.
      'let g:dumbbuf_single_key = 1' to use it.
    - add g:dumbbuf_single_key, g:dumbbuf_updatetime.
    - map plain gg and G mappings in local buffer.
    - fix bug of making a waste buffer when called from
      unlisted buffer.
0.0.5:
    - fix bug: when using with another plugin that uses unlisted buffer,
      pressing <CR> in dumbbuf buffer jumps into that unlisted buffer.
      Thanks to Bernhard Walle for reporting the bug.
    - add g:dumbbuf_open_with.
0.0.6:
    - fix bug: when there is no buffers in list,
      dumbbuf can't get selected buffer info.
    - add option g:dumbbuf_wrap_cursor, and allow "keep" in
      g:dumbbuf_cursor_pos.
    - implement "mark" of buffers. mapping is "xx".
0.0.7:
    - highlight support
    - add option g:dumbbuf_single_key_echo_stack,
      g:dumbbuf_hl_cursorline,
      g:dumbbuf_remove_marked_when_close.
    - change g:dumbbuf_disp_expr's spec.
    - fix minor bugs and do some optimizations.
    - replace the words "select" to "mark" in document and source code.
      I would use "select" for only visual mode's region.
0.0.8:
    - NOTE: If you want to use mapping
      2 more than characters to toggle dumbbuf buffer,
      you have to change g:dumbbuf_timeoutlen.
      for e.g.: let g:dumbbuf_timeoutlen = 100
      But you can always use "q" to close buffer.
    - Change default values of g:dumbbuf_disp_expr, g:dumbbuf_options
      (Options written in "For The Experienced User" may be changed
      in the future. sorry)
    - Implement g:dumbbuf_all_shown_types.
    - Remove g:dumbbuf_single_key, g:dumbbuf_single_key_echo_stack,
      g:dumbbuf_updatetime
    - Remove single key emulation.
      This emulates normal key input
      in order to prevent Vim from waiting candidate keys.
      Now I know I have invented the wheel :)
      (I changed &timeout, &timeoutlen)
    - Suppress flicker when mapping executed.
    - Some optimizations.
    - Some fixes of minor bugs.

}}}
==============================================================================
vim:tw=78:fo=tcq2mM:ts=8:ft=help:norl:fen:fdm=marker:noet:
