snippet pu
    public


snippet po
    protected


snippet pr
    private


snippet st
    static


snippet fi
    final


snippet ab
    abstract


snippet cl
	class ${1} ${2:extends} ${3:Parent} ${4:implements} ${5:Interface} {
		${0}
	}


snippet in
	interface ${1} ${2:extends} ${3:Parent} {
		${0}
	}


snippet m
	${1:void} ${2:method}(${3}) ${4:throws} {
		${0}
	}
    

snippet v
    ${1:String} ${2:var}${3};


snippet co
    static public final ${1:String} ${2:var} = ${3};${4}


snippet cos
    static public final String ${1:var} = "${2}";${4}


snippet re
    return


snippet as
    assert ${1:test} ${2:Failure message};${3}


snippet if
	if (${1}) {
		${2}
	}

snippet elif
	else if (${1}) {
		${2}
	}
    

snippet wh
	while (${1}) {
		${2}
	}
    

snippet for
	for (${1}; ${2}; ${3}) {
		${4}
	}
	    
	    
snippet fore
	for (${1} : ${2}) {
	${3}
}


snippet sw
	switch (${1}) {
		${2}
	}
    
    
snippet case
abbr ce
	case ${1}:
		${2}
	${0}
	    

snippet br
    break;


snippet de
	default:
		${0}


snippet ca
	catch (${1:Exception} ${2:e}) {
		${0}
	}
    
    
snippet th
    throw ${0}


snippet sy
    synchronized


snippet im
    import


snippet pa
    package


snippet tc
	public class ${1} extends ${2:TestCase} {
		${0}
	}
    

snippet t
	public void test${1:Name}() throws Exception {
		${0}
	}
    

snippet imt
	import junit.framework.TestCase;
	${0}
    

snippet j.u
    java.util.


snippet j.i
    java.io.


snippet j.b
    java.beans.


snippet j.n
    java.net


snippet j.m
    java.math.


snippet main
	public static void main(String[] args) {
		${0}
	}
    

snippet pl
    System.out.println(${1});${0}


snippet p
    System.out.print(${1});${0}


#javadoc
snippet c
	/**
	 * ${0}
	 */
    

snippet a
    @author ${0:$TM_FULLNAME}


snippet {code
abbr {
    {@code ${0}


snippet d
    @deprecated ${0:description}


snippet {docRoot
abbr {
    {@docRoot


snippet {inheritDoc
abbr {
    {@inheritDoc


snippet {link
abbr {
    {@link ${1:target} ${0:label}


snippet {linkplain
abbr {
    {@linkplain ${1:target} ${0:label}


snippet {literal
abbr {
    {@literal ${0}


snippet param
    @param ${1:var} ${0:description}


snippet r
    @return ${0:description}


snippet s
    @see ${0:reference}


snippet se
    @serial ${0:description}


snippet sd
    @serialField ${0:description}


snippet sf
    @serialField ${1:name} ${2:type} ${0:description}


snippet si
    @since ${0:version}


snippet t
    @throws ${1:class} ${0:description}


snippet {value
abbr {
    {@value ${0}


snippet ver
    @version ${0:version}


snippet null
    {@code null}
