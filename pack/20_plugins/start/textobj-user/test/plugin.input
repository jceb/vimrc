function s:describe__textobj_user_plugin()  "{{{1
  call textobj#user#plugin('fruit', {
  \   'apple': {
  \     '*pattern*': '\<\d\{4}\>',
  \     'select': ['aa', 'ia'],
  \     'move-n': 'ja',
  \     'move-p': 'ka',
  \   },
  \   'banana': {
  \     '*pattern*': ['<<', '>>'],
  \     'select-a': 'ab',
  \     'select-i': 'ib',
  \   },
  \   '-': {
  \     '*select-function*': 'SelectCherry',
  \     'select': ['ac', 'ic'],
  \   },
  \ })

  It should define default UI key mappings.

  function! Test1(lhs)
    return map(['n', 'x', 's', 'o', 'i', 'c', 'l'],
    \          'maparg(' . string(a:lhs) . ', v:val)')
  endfunction
  function! Test2(lhs)
    return map(Test1(a:lhs), 'v:val != ""')
  endfunction
  let x = ''

  let o = '<Plug>(textobj-fruit-apple)'
  Should Test1('aa') ==# [x, o, x, o, x, x, x]
  Should Test1('ia') ==# [x, o, x, o, x, x, x]
  let o = '<Plug>(textobj-fruit-apple-n)'
  Should Test1('ja') ==# [o, o, x, o, x, x, x]
  let o = '<Plug>(textobj-fruit-apple-p)'
  Should Test1('ka') ==# [o, o, x, o, x, x, x]

  let o = '<Plug>(textobj-fruit-banana-a)'
  Should Test1('ab') ==# [x, o, x, o, x, x, x]
  let o = '<Plug>(textobj-fruit-banana-i)'
  Should Test1('ib') ==# [x, o, x, o, x, x, x]

  let o = '<Plug>(textobj-fruit)'
  Should Test1('ac') ==# [x, o, x, o, x, x, x]
  Should Test1('ic') ==# [x, o, x, o, x, x, x]

  It should define named key mappings.

  Should Test2('<Plug>(textobj-fruit-apple)') ==# [0, 1, 1, 1, 0, 0, 0]
  Should Test2('<Plug>(textobj-fruit-apple-n)') ==# [1, 1, 1, 1, 0, 0, 0]
  Should Test2('<Plug>(textobj-fruit-apple-p)') ==# [1, 1, 1, 1, 0, 0, 0]
  Should Test2('<Plug>(textobj-fruit-banana-a)') ==# [0, 1, 1, 1, 0, 0, 0]
  Should Test2('<Plug>(textobj-fruit-banana-i)') ==# [0, 1, 1, 1, 0, 0, 0]
  Should Test2('<Plug>(textobj-fruit)') ==# [0, 1, 1, 1, 0, 0, 0]

  It should define an Ex command to define default UI key mappings.
  It should work.

  " FIXME: NIY
endfunction




" __END__  "{{{1
" vim: filetype=vim foldmethod=marker
